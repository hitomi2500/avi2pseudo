0001   0000               .include "stdlib8080.inc"
0001+  0000               .org 0h
0002+  0000             entry:
0003+  0000 C3 03 00      jmp main
0004+  0003             
0002   0003             main:
0003   0003 3E 01            MVI  A, 1		; Версия контроллера
0004   0005 01 17 DE         LXI  B, 0DE17h; BiosEntry  ; Точка входа SD BIOS
0005   0008 11 F3 DB         LXI  D, 0DBF3h; SELF_NAME  ; Собственное имя
0006   000B 21 F3 DC         LXI  H, 0DCF3h; CMD_LINE   ; Командная строка
0007   000E               
0008   000E               ; 22 fs_init();
0009   000E CD 6B 03      call fs_init
0010   0011               ; 1 ((uchar*)0xEF00)
0011   0011 21 01 EF      lxi h, 61185
0012   0014 36 80         mvi m, 128
0013   0016               ; 1 ((uchar*)0xEF00)
0014   0016 2D            dcr l
0015   0017 36 FF         mvi m, 255
0016   0019               ; 1 ((uchar*)0xEF00)
0017   0019 36 FF         mvi m, 255
0018   001B               ; 29 apogeyScreen3A();
0019   001B CD 7C 03      call apogeyScreen3a
0020   001E               ; 31 fs_open("VIDEO/APPLE.APV");
0021   001E 21 C7 04      lxi h, string0
0022   0021 CD 12 04      call fs_open
0023   0024               ; 34 asm{
0024   0024 11 00 40    	LXI D, 04000h
0025   0027 21 00 01    	LXI H, 00100h ; header 256 bytes
0026   002A 3E 04           MVI  A, 004h;read command
0027   002C CD 78 03    	CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0028   002F 2A 04 40    	LHLD 04004h 
0029   0032 22 A9 04    	SHLD main_iNumberOfFrames
0030   0035               
0031   0035               ; 44 asm{
0032   0035 21 00 40    	  LXI H, 04000h
0033   0038 22 A5 04    	  SHLD main_FifoReadPointer
0034   003B 22 A7 04    	  SHLD main_FifoWritePointer
0035   003E               
0036   003E               ; 51 asm{
0037   003E 2A A7 04    	LHLD main_FifoWritePointer
0038   0041 EB          	XCHG
0039   0042 21 00 30    	LXI H, 03000h ; размер передачи 12k
0040   0045 3E 04           MVI  A, 004h;read command
0041   0047 CD 78 03    	CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0042   004A 21 00 70    	LXI H, 07000h
0043   004D 22 A7 04    	SHLD main_FifoWritePointer
0044   0050             	;DI ;for debug
0045   0050               
0046   0050               ; 62 iFrameCounter = iNumberOfFrames;
0047   0050 2A A9 04      lhld main_iNumberOfFrames
0048   0053 22 AB 04      shld main_iFrameCounter
0049   0056               ; 64 asm{
0050   0056             Main_Loop_Start:
0051   0056 2A AB 04    	LHLD main_iFrameCounter
0052   0059 AF          	XRA A ; A=0
0053   005A BC          	CMP H
0054   005B C2 65 00    	JNZ Fifo_Write_Start
0055   005E BD          	CMP L
0056   005F C2 65 00    	JNZ Fifo_Write_Start
0057   0062 C3 32 01    	JMP Do_Exit
0058   0065             Fifo_Write_Start:
0059   0065             	; first check if we have enough free space in fifo, granularity is 1024 bytes
0060   0065             	; fifo is almost full when either (write!=7C00 and read-write>0 and read-write-8 < 0), or ( write=7C00 and (read> 7C00 or read < 4400) )
0061   0065 2A A7 04    	LHLD main_FifoWritePointer
0062   0068 7C          	MOV A,H
0063   0069 FE 7C       	CPI 07Ch
0064   006B CA 82 00    	JZ Fifo_Write_Start2
0065   006E             	;not end-buffer case, check read-write>0
0066   006E 2A A5 04    	LHLD main_FifoReadPointer
0067   0071 7C          	MOV A,H
0068   0072 2A A7 04    	LHLD main_FifoWritePointer
0069   0075 BC          	CMP H
0070   0076 FA 93 00    	JM Fifo_Write_Do ;read-write < 0, not skipping
0071   0079             	;check read-write-8 < 0
0072   0079 94          	SUB H
0073   007A D6 08       	SUI 08h
0074   007C F2 93 00    	JP Fifo_Write_Do ;read-write-8 > 0, not skipping
0075   007F C3 B1 00    	JMP Fifo_Read_Start ;skipping after all
0076   0082             Fifo_Write_Start2:
0077   0082             	;end-buffer case, checking if read > 7C00 (not wrapped) 
0078   0082 2A A5 04    	LHLD main_FifoReadPointer
0079   0085 7C          	MOV A,H
0080   0086 FE 7C       	CPI 07Ch
0081   0088 F2 B1 00    	JP Fifo_Read_Start ;read is > 7C00, skipping write
0082   008B             	;now check if read < 4400 (wrapped) 
0083   008B FE 45       	CPI 045h
0084   008D FA B1 00    	JM Fifo_Read_Start ;read is < 4400, skipping write
0085   0090 C3 93 00    	JMP Fifo_Write_Do ;writing after all
0086   0093             Fifo_Write_Do:
0087   0093 2A A7 04    	LHLD main_FifoWritePointer
0088   0096 EB          	XCHG
0089   0097 21 00 04    	LXI H, 00400h ; размер передачи 1024 байт
0090   009A 3E 04           MVI  A, 004h;read command
0091   009C CD 78 03    	CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0092   009F 2A A7 04    	LHLD main_FifoWritePointer
0093   00A2 3E 04       	MVI A, 004h
0094   00A4 84          	ADD H
0095   00A5 67          	MOV H, A
0096   00A6 3E 80       	MVI A,080h
0097   00A8 BC          	CMP H
0098   00A9 C2 AE 00    	JNZ Fifo_Write_Do2 ;if fifo write pointer is not at 0x8000, move on
0099   00AC 26 40       	MVI H,040h ; else wrap back to 0x4000 and move on
0100   00AE             Fifo_Write_Do2:	
0101   00AE 22 A7 04    	SHLD main_FifoWritePointer
0102   00B1             
0103   00B1             	
0104   00B1             Fifo_Read_Start:
0105   00B1             	;first thing to do is to check that we have at least full frame worth of fifo data
0106   00B1             	;if we dont, wait for fifo to fill up
0107   00B1             	;there are 2 cases of empty fifo: (write > read) and (write - read < 16) (normal case),
0108   00B1             	;								or (write < read) and (read - write > 48) (wrap case)
0109   00B1 2A A7 04    	LHLD main_FifoWritePointer
0110   00B4 7C          	MOV A,H
0111   00B5 2A A5 04    	LHLD main_FifoReadPointer
0112   00B8 94          	SUB H
0113   00B9 F2 CC 00    	JP Fifo_Read_Normal
0114   00BC             	;wrap case, calculating (read - write) instead
0115   00BC 2A A5 04    	LHLD main_FifoReadPointer
0116   00BF 7C          	MOV A,H
0117   00C0 2A A7 04    	LHLD main_FifoWritePointer
0118   00C3 94          	SUB H
0119   00C4             	;ok, weve got (read - write),it should be positive. now check if its bigger than 48
0120   00C4 D6 30       	SUI 030h
0121   00C6 F2 56 00    	JP Main_Loop_Start ;it IS bigger, meaning FIFO is almost empty, skipping read
0122   00C9 C3 D1 00    	JMP Fifo_Read_Do
0123   00CC             Fifo_Read_Normal:
0124   00CC             	;normal case, diff (write - read) is already in A, checking if its bigger than 16
0125   00CC D6 10       	SUI 010h
0126   00CE FA 56 00    	JM Main_Loop_Start ;it is NOT bigger, meaning FIFO is almost empty, skipping read	
0127   00D1             Fifo_Read_Do:
0128   00D1             	;decrease frame counter
0129   00D1 2A AB 04    	LHLD main_iFrameCounter
0130   00D4 2B          	DCX H
0131   00D5 22 AB 04    	SHLD main_iFrameCounter
0132   00D8             	;okay, FIFO is not empty, but current frame might be wrapping around FIFO end
0133   00D8             	;we check this by adding frame size to read pointer
0134   00D8 2A A5 04    	LHLD main_FifoReadPointer
0135   00DB 23          	INX H
0136   00DC 23          	INX H
0137   00DD 5E          	MOV E,M
0138   00DE 23          	INX H
0139   00DF 56          	MOV D,M
0140   00E0 23          	INX H
0141   00E1 19          	DAD D
0142   00E2 7C          	MOV A,H
0143   00E3 D6 80       	SUI 080h
0144   00E5 FA 1C 01    	JM Fifo_Read_Do2 ;if frame is NOT wrapped, unpack it as is
0145   00E8             	;frame IS wrapped, copy part that doesnt fit from 4000 to 8000
0146   00E8             	;HL still stores overwrapped value, so use that
0147   00E8 E5          	PUSH H
0148   00E9 C1          	POP B
0149   00EA 78          	MOV A,B
0150   00EB E6 0F       	ANI 00Fh
0151   00ED 47          	MOV B,A ;now we have a size in BC
0152   00EE 21 00 40    	LXI H, 04000h
0153   00F1 11 00 80    	LXI D, 08000h
0154   00F4             Fifo_Read_Copy_Loop:
0155   00F4 7E          	MOV A,M
0156   00F5 12          	STAX D
0157   00F6 23          	INX H
0158   00F7 13          	INX D
0159   00F8 0B          	DCX B
0160   00F9 AF          	XRA A ; A=0
0161   00FA B8          	CMP B
0162   00FB C2 F4 00    	JNZ Fifo_Read_Copy_Loop
0163   00FE B9          	CMP C
0164   00FF C2 F4 00    	JNZ Fifo_Read_Copy_Loop
0165   0102             	;copy done, now processing frame as-is
0166   0102 2A A5 04    	LHLD main_FifoReadPointer
0167   0105 CD 39 01    	CALL unpack_btree1
0168   0108             	;now move read pointer
0169   0108 2A A5 04    	LHLD main_FifoReadPointer
0170   010B 23          	INX H
0171   010C 23          	INX H
0172   010D 5E          	MOV E,M
0173   010E 23          	INX H
0174   010F 56          	MOV D,M
0175   0110 23          	INX H
0176   0111 19          	DAD D
0177   0112 7C          	MOV A,H
0178   0113 D6 40       	SUI 040h
0179   0115 67          	MOV H,A
0180   0116 22 A5 04    	SHLD main_FifoReadPointer
0181   0119 C3 56 00    	JMP Main_Loop_Start ;go back to mail loop start	
0182   011C             	
0183   011C             Fifo_Read_Do2:	
0184   011C             	;non-wrapped unpack
0185   011C 2A A5 04    	LHLD main_FifoReadPointer
0186   011F CD 39 01    	CALL unpack_btree1
0187   0122             	;now move read pointer
0188   0122 2A A5 04    	LHLD main_FifoReadPointer
0189   0125 23          	INX H
0190   0126 23          	INX H
0191   0127 5E          	MOV E,M
0192   0128 23          	INX H
0193   0129 56          	MOV D,M
0194   012A 23          	INX H
0195   012B 19          	DAD D
0196   012C 22 A5 04    	SHLD main_FifoReadPointer
0197   012F C3 56 00    	JMP Main_Loop_Start ;go back to mail loop start
0198   0132             
0199   0132             Do_Exit:
0200   0132               
0201   0132               ; 217 apogeyScreen0();
0202   0132 CD 1D 04      call apogeyScreen0
0203   0135               ; 218 asm {
0204   0135 C3 75 F8    		JMP 0F875h ;jump to monitor
0205   0138             	
0206   0138 C9            ret
0207   0139               ; --- unpack_btree1 -----------------------------------------------------------------
0208   0139             unpack_btree1:
0209   0139 23          	INX H
0210   013A 23          	INX H
0211   013B 23          	INX H
0212   013C 23          	INX H
0213   013D 11 13 C1    	LXI D, 0C113h ;ScreenStart
0214   0140 7E          	MOV A,M ;load 1st byte into A
0215   0141 23          	INX H ;move to next byte
0216   0142 47          	MOV B,A ;save A
0217   0143 E6 01       	ANI 001h
0218   0145 CA 4E 01    	JZ unpack_level1_1
0219   0148 CD D3 01    	CALL unpack_level2
0220   014B C3 55 01    	JMP unpack_level1_1_end
0221   014E             unpack_level1_1:
0222   014E E5          	PUSH H
0223   014F 21 58 02    	LXI H,0258h
0224   0152 19          	DAD D
0225   0153 EB          	XCHG
0226   0154 E1          	POP H
0227   0155             unpack_level1_1_end:
0228   0155 78          	MOV A,B ;restore A
0229   0156 E6 02       	ANI 002h
0230   0158 CA 61 01    	JZ unpack_level1_2
0231   015B CD D3 01    	CALL unpack_level2
0232   015E C3 68 01    	JMP unpack_level1_2_end
0233   0161             unpack_level1_2:
0234   0161 E5          	PUSH H
0235   0162 21 58 02    	LXI H,0258h
0236   0165 19          	DAD D
0237   0166 EB          	XCHG
0238   0167 E1          	POP H
0239   0168             unpack_level1_2_end:
0240   0168 78          	MOV A,B ;restore A
0241   0169 E6 04       	ANI 004h
0242   016B CA 74 01    	JZ unpack_level1_3
0243   016E CD D3 01    	CALL unpack_level2
0244   0171 C3 7B 01    	JMP unpack_level1_3_end
0245   0174             unpack_level1_3:
0246   0174 E5          	PUSH H
0247   0175 21 58 02    	LXI H,0258h
0248   0178 19          	DAD D
0249   0179 EB          	XCHG
0250   017A E1          	POP H
0251   017B             unpack_level1_3_end:
0252   017B 78          	MOV A,B ;restore A
0253   017C E6 08       	ANI 008h
0254   017E CA 87 01    	JZ unpack_level1_4
0255   0181 CD D3 01    	CALL unpack_level2
0256   0184 C3 8E 01    	JMP unpack_level1_4_end
0257   0187             unpack_level1_4:
0258   0187 E5          	PUSH H
0259   0188 21 58 02    	LXI H,0258h
0260   018B 19          	DAD D
0261   018C EB          	XCHG
0262   018D E1          	POP H
0263   018E             unpack_level1_4_end:
0264   018E 78          	MOV A,B ;restore A
0265   018F E6 10       	ANI 010h
0266   0191 CA 9A 01    	JZ unpack_level1_5
0267   0194 CD D3 01    	CALL unpack_level2
0268   0197 C3 A1 01    	JMP unpack_level1_5_end
0269   019A             unpack_level1_5:
0270   019A E5          	PUSH H
0271   019B 21 58 02    	LXI H,0258h
0272   019E 19          	DAD D
0273   019F EB          	XCHG
0274   01A0 E1          	POP H
0275   01A1             unpack_level1_5_end:
0276   01A1 78          	MOV A,B ;restore A
0277   01A2 E6 20       	ANI 020h
0278   01A4 CA AD 01    	JZ unpack_level1_6
0279   01A7 CD D3 01    	CALL unpack_level2
0280   01AA C3 B4 01    	JMP unpack_level1_6_end
0281   01AD             unpack_level1_6:
0282   01AD E5          	PUSH H
0283   01AE 21 58 02    	LXI H,0258h
0284   01B1 19          	DAD D
0285   01B2 EB          	XCHG
0286   01B3 E1          	POP H
0287   01B4             unpack_level1_6_end:
0288   01B4 78          	MOV A,B ;restore A
0289   01B5 E6 40       	ANI 040h
0290   01B7 CA C0 01    	JZ unpack_level1_7
0291   01BA CD D3 01    	CALL unpack_level2
0292   01BD C3 C7 01    	JMP unpack_level1_7_end
0293   01C0             unpack_level1_7:
0294   01C0 E5          	PUSH H
0295   01C1 21 58 02    	LXI H,0258h
0296   01C4 19          	DAD D
0297   01C5 EB          	XCHG
0298   01C6 E1          	POP H
0299   01C7             unpack_level1_7_end:
0300   01C7 78          	MOV A,B ;restore A
0301   01C8 E6 80       	ANI 080h
0302   01CA CA D0 01    	JZ unpack_level1_8
0303   01CD CD D3 01    	CALL unpack_level2
0304   01D0             unpack_level1_8:
0305   01D0 C3 69 03    	JMP unpack_end
0306   01D3             	
0307   01D3             unpack_level2:
0308   01D3 C5          	PUSH B
0309   01D4 7E          	MOV A,M ;load byte into A
0310   01D5 23          	INX H ;move to next byte
0311   01D6 47          	MOV B,A ;save A
0312   01D7 E6 01       	ANI 001h
0313   01D9 CA E2 01    	JZ unpack_level2_1
0314   01DC CD 70 02    	CALL unpack_level3
0315   01DF C3 E9 01    	JMP unpack_level2_1_end
0316   01E2             unpack_level2_1:
0317   01E2 E5          	PUSH H
0318   01E3 21 4B 00    	LXI H,04Bh
0319   01E6 19          	DAD D
0320   01E7 EB          	XCHG
0321   01E8 E1          	POP H
0322   01E9             unpack_level2_1_end:
0323   01E9 78          	MOV A,B ;restore A
0324   01EA E6 02       	ANI 002h
0325   01EC CA F5 01    	JZ unpack_level2_2
0326   01EF CD 70 02    	CALL unpack_level3
0327   01F2 C3 FC 01    	JMP unpack_level2_2_end
0328   01F5             unpack_level2_2:
0329   01F5 E5          	PUSH H
0330   01F6 21 4B 00    	LXI H,04Bh
0331   01F9 19          	DAD D
0332   01FA EB          	XCHG
0333   01FB E1          	POP H
0334   01FC             unpack_level2_2_end:
0335   01FC 78          	MOV A,B ;restore A
0336   01FD E6 04       	ANI 004h
0337   01FF CA 08 02    	JZ unpack_level2_3
0338   0202 CD 70 02    	CALL unpack_level3
0339   0205 C3 0F 02    	JMP unpack_level2_3_end
0340   0208             unpack_level2_3:
0341   0208 E5          	PUSH H
0342   0209 21 4B 00    	LXI H,04Bh
0343   020C 19          	DAD D
0344   020D EB          	XCHG
0345   020E E1          	POP H
0346   020F             unpack_level2_3_end:
0347   020F 78          	MOV A,B ;restore A
0348   0210 E6 08       	ANI 008h
0349   0212 CA 1B 02    	JZ unpack_level2_4
0350   0215 CD 70 02    	CALL unpack_level3
0351   0218 C3 22 02    	JMP unpack_level2_4_end
0352   021B             unpack_level2_4:
0353   021B E5          	PUSH H
0354   021C 21 4B 00    	LXI H,04Bh
0355   021F 19          	DAD D
0356   0220 EB          	XCHG
0357   0221 E1          	POP H
0358   0222             unpack_level2_4_end:
0359   0222 78          	MOV A,B ;restore A
0360   0223 E6 10       	ANI 010h
0361   0225 CA 2E 02    	JZ unpack_level2_5
0362   0228 CD 70 02    	CALL unpack_level3
0363   022B C3 35 02    	JMP unpack_level2_5_end
0364   022E             unpack_level2_5:
0365   022E E5          	PUSH H
0366   022F 21 4B 00    	LXI H,04Bh
0367   0232 19          	DAD D
0368   0233 EB          	XCHG
0369   0234 E1          	POP H
0370   0235             unpack_level2_5_end:
0371   0235 78          	MOV A,B ;restore A
0372   0236 E6 20       	ANI 020h
0373   0238 CA 41 02    	JZ unpack_level2_6
0374   023B CD 70 02    	CALL unpack_level3
0375   023E C3 48 02    	JMP unpack_level2_6_end
0376   0241             unpack_level2_6:
0377   0241 E5          	PUSH H
0378   0242 21 4B 00    	LXI H,04Bh
0379   0245 19          	DAD D
0380   0246 EB          	XCHG
0381   0247 E1          	POP H
0382   0248             unpack_level2_6_end:
0383   0248 78          	MOV A,B ;restore A
0384   0249 E6 40       	ANI 040h
0385   024B CA 54 02    	JZ unpack_level2_7
0386   024E CD 70 02    	CALL unpack_level3
0387   0251 C3 5B 02    	JMP unpack_level2_7_end
0388   0254             unpack_level2_7:
0389   0254 E5          	PUSH H
0390   0255 21 4B 00    	LXI H,04Bh
0391   0258 19          	DAD D
0392   0259 EB          	XCHG
0393   025A E1          	POP H
0394   025B             unpack_level2_7_end:
0395   025B 78          	MOV A,B ;restore A
0396   025C E6 80       	ANI 080h
0397   025E CA 67 02    	JZ unpack_level2_8
0398   0261 CD 70 02    	CALL unpack_level3
0399   0264 C3 6E 02    	JMP unpack_level2_8_end
0400   0267             unpack_level2_8:
0401   0267 E5          	PUSH H
0402   0268 21 4B 00    	LXI H,04Bh
0403   026B 19          	DAD D
0404   026C EB          	XCHG
0405   026D E1          	POP H
0406   026E             unpack_level2_8_end:
0407   026E C1          	POP B
0408   026F C9          	RET
0409   0270             
0410   0270             unpack_level3:
0411   0270 C5          	PUSH B
0412   0271 7E          	MOV A,M ;load byte into A
0413   0272 23          	INX H ;move to next byte
0414   0273 47          	MOV B,A ;save A
0415   0274 E6 01       	ANI 001h
0416   0276 CA 7F 02    	JZ unpack_level3_1
0417   0279 CD 14 03    	CALL unpack_level4
0418   027C C3 86 02    	JMP unpack_level3_1_end
0419   027F             unpack_level3_1:
0420   027F E5          	PUSH H
0421   0280 21 08 00    	LXI H,008h
0422   0283 19          	DAD D
0423   0284 EB          	XCHG
0424   0285 E1          	POP H
0425   0286             unpack_level3_1_end:
0426   0286 78          	MOV A,B ;restore A
0427   0287 E6 02       	ANI 002h
0428   0289 CA 92 02    	JZ unpack_level3_2
0429   028C CD 14 03    	CALL unpack_level4
0430   028F C3 99 02    	JMP unpack_level3_2_end
0431   0292             unpack_level3_2:
0432   0292 E5          	PUSH H
0433   0293 21 08 00    	LXI H,008h
0434   0296 19          	DAD D
0435   0297 EB          	XCHG
0436   0298 E1          	POP H
0437   0299             unpack_level3_2_end:
0438   0299 78          	MOV A,B ;restore A
0439   029A E6 04       	ANI 004h
0440   029C CA A5 02    	JZ unpack_level3_3
0441   029F CD 14 03    	CALL unpack_level4
0442   02A2 C3 AC 02    	JMP unpack_level3_3_end
0443   02A5             unpack_level3_3:
0444   02A5 E5          	PUSH H
0445   02A6 21 08 00    	LXI H,008h
0446   02A9 19          	DAD D
0447   02AA EB          	XCHG
0448   02AB E1          	POP H
0449   02AC             unpack_level3_3_end:
0450   02AC 78          	MOV A,B ;restore A
0451   02AD E6 08       	ANI 008h
0452   02AF CA B8 02    	JZ unpack_level3_4
0453   02B2 CD 14 03    	CALL unpack_level4
0454   02B5 C3 BF 02    	JMP unpack_level3_4_end
0455   02B8             unpack_level3_4:
0456   02B8 E5          	PUSH H
0457   02B9 21 08 00    	LXI H,008h
0458   02BC 19          	DAD D
0459   02BD EB          	XCHG
0460   02BE E1          	POP H
0461   02BF             unpack_level3_4_end:
0462   02BF 78          	MOV A,B ;restore A
0463   02C0 E6 10       	ANI 010h
0464   02C2 CA CB 02    	JZ unpack_level3_5
0465   02C5 CD 14 03    	CALL unpack_level4
0466   02C8 C3 D2 02    	JMP unpack_level3_5_end
0467   02CB             unpack_level3_5:
0468   02CB E5          	PUSH H
0469   02CC 21 08 00    	LXI H,008h
0470   02CF 19          	DAD D
0471   02D0 EB          	XCHG
0472   02D1 E1          	POP H
0473   02D2             unpack_level3_5_end:
0474   02D2 78          	MOV A,B ;restore A
0475   02D3 E6 20       	ANI 020h
0476   02D5 CA DE 02    	JZ unpack_level3_6
0477   02D8 CD 14 03    	CALL unpack_level4
0478   02DB C3 E5 02    	JMP unpack_level3_6_end
0479   02DE             unpack_level3_6:
0480   02DE E5          	PUSH H
0481   02DF 21 08 00    	LXI H,008h
0482   02E2 19          	DAD D
0483   02E3 EB          	XCHG
0484   02E4 E1          	POP H
0485   02E5             unpack_level3_6_end:
0486   02E5 78          	MOV A,B ;restore A
0487   02E6 E6 40       	ANI 040h
0488   02E8 CA F1 02    	JZ unpack_level3_7
0489   02EB CD 14 03    	CALL unpack_level4
0490   02EE C3 F8 02    	JMP unpack_level3_7_end
0491   02F1             unpack_level3_7:
0492   02F1 E5          	PUSH H
0493   02F2 21 08 00    	LXI H,008h
0494   02F5 19          	DAD D
0495   02F6 EB          	XCHG
0496   02F7 E1          	POP H
0497   02F8             unpack_level3_7_end:
0498   02F8 78          	MOV A,B ;restore A
0499   02F9 E6 80       	ANI 080h
0500   02FB CA 04 03    	JZ unpack_level3_8
0501   02FE CD 14 03    	CALL unpack_level4
0502   0301 C3 0B 03    	JMP unpack_level3_8_end
0503   0304             unpack_level3_8:
0504   0304 E5          	PUSH H
0505   0305 21 08 00    	LXI H,008h
0506   0308 19          	DAD D
0507   0309 EB          	XCHG
0508   030A E1          	POP H
0509   030B             unpack_level3_8_end:
0510   030B             	;end of line: add 11 bytes
0511   030B E5          	PUSH H
0512   030C 21 0B 00    	LXI H,00Bh
0513   030F 19          	DAD D
0514   0310 EB          	XCHG
0515   0311 E1          	POP H
0516   0312             	;going back
0517   0312 C1          	POP B
0518   0313 C9          	RET
0519   0314             
0520   0314             unpack_level4:
0521   0314 C5          	PUSH B
0522   0315 7E          	MOV A,M ;load byte into A
0523   0316 23          	INX H ;move to next byte
0524   0317 47          	MOV B,A ;save A
0525   0318 E6 01       	ANI 001h
0526   031A CA 20 03    	JZ unpack_level4_1
0527   031D 7E          	MOV A,M ;load byte into A
0528   031E 23          	INX H ;move to next byte
0529   031F 12          	STAX D
0530   0320             unpack_level4_1:
0531   0320 13          	INX D
0532   0321 78          	MOV A,B ;restore A
0533   0322 E6 02       	ANI 002h
0534   0324 CA 2A 03    	JZ unpack_level4_2
0535   0327 7E          	MOV A,M ;load byte into A
0536   0328 23          	INX H ;move to next byte
0537   0329 12          	STAX D
0538   032A             unpack_level4_2:
0539   032A 13          	INX D
0540   032B 78          	MOV A,B ;restore A
0541   032C E6 04       	ANI 004h
0542   032E CA 34 03    	JZ unpack_level4_3
0543   0331 7E          	MOV A,M ;load byte into A
0544   0332 23          	INX H ;move to next byte
0545   0333 12          	STAX D
0546   0334             unpack_level4_3:
0547   0334 13          	INX D
0548   0335 78          	MOV A,B ;restore A
0549   0336 E6 08       	ANI 008h
0550   0338 CA 3E 03    	JZ unpack_level4_4
0551   033B 7E          	MOV A,M ;load byte into A
0552   033C 23          	INX H ;move to next byte
0553   033D 12          	STAX D
0554   033E             unpack_level4_4:
0555   033E 13          	INX D
0556   033F 78          	MOV A,B ;restore A
0557   0340 E6 10       	ANI 010h
0558   0342 CA 48 03    	JZ unpack_level4_5
0559   0345 7E          	MOV A,M ;load byte into A
0560   0346 23          	INX H ;move to next byte
0561   0347 12          	STAX D
0562   0348             unpack_level4_5:
0563   0348 13          	INX D
0564   0349 78          	MOV A,B ;restore A
0565   034A E6 20       	ANI 020h
0566   034C CA 52 03    	JZ unpack_level4_6
0567   034F 7E          	MOV A,M ;load byte into A
0568   0350 23          	INX H ;move to next byte
0569   0351 12          	STAX D
0570   0352             unpack_level4_6:
0571   0352 13          	INX D
0572   0353 78          	MOV A,B ;restore A
0573   0354 E6 40       	ANI 040h
0574   0356 CA 5C 03    	JZ unpack_level4_7
0575   0359 7E          	MOV A,M ;load byte into A
0576   035A 23          	INX H ;move to next byte
0577   035B 12          	STAX D
0578   035C             unpack_level4_7:
0579   035C 13          	INX D
0580   035D 78          	MOV A,B ;restore A
0581   035E E6 80       	ANI 080h
0582   0360 CA 66 03    	JZ unpack_level4_8
0583   0363 7E          	MOV A,M ;load byte into A
0584   0364 23          	INX H ;move to next byte
0585   0365 12          	STAX D
0586   0366             unpack_level4_8:
0587   0366 13          	INX D
0588   0367 C1          	POP B
0589   0368 C9          	RET
0590   0369             	
0591   0369             unpack_end:
0592   0369 00          	NOP
0593   036A               
0594   036A C9            ret
0595   036B               ; --- fs_init -----------------------------------------------------------------
0596   036B             fs_init:
0597   036B 22 AD 04        SHLD fs_cmdLine
0598   036E EB              XCHG
0599   036F 22 B0 04        SHLD fs_selfName
0600   0372 60              MOV H, B
0601   0373 69              MOV L, C
0602   0374 22 79 03        SHLD fs_entry_n+1
0603   0377               
0604   0377 C9            ret
0605   0378               ; --- fs_entry -----------------------------------------------------------------
0606   0378             fs_entry:
0607   0378             fs_entry_n:
0608   0378 C3 00 00        JMP 0000h
0609   037B               
0610   037B C9            ret
0611   037C               ; --- apogeyScreen3a -----------------------------------------------------------------
0612   037C             apogeyScreen3a:
0613   037C C5            push b
0614   037D               ; 3 memset((uchar*)MEM_ADDR, 0, (HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+2); 
0615   037D 21 FF C0      lxi h, 49407
0616   0380 22 BC 04      shld memset_1
0617   0383 AF            xra a
0618   0384 32 BE 04      sta memset_2
0619   0387 21 01 0F      lxi h, 3841
0620   038A CD 77 04      call memset
0621   038D               ; 4 for(v=(uchar*)(MEM_ADDR)-1, i=TOP_INVISIBLE; i; --i) 
0622   038D 01 FE C0      lxi b, 49406
0623   0390 3E 07         mvi a, 7
0624   0392 32 B8 04      sta apogeyScreen3a_i
0625   0395             l0:
0626   0395               ; convertToConfition
0627   0395 3A B8 04      lda apogeyScreen3a_i
0628   0398 B7            ora a
0629   0399 CA A8 03      jz l1
0630   039C               ; 5 v+=2, *v = 0xF1; —ложение BC с константой 2
0631   039C 03            inx b
0632   039D 03            inx b
0633   039E 3E F1         mvi a, 241
0634   03A0 02            stax b
0635   03A1             l2:
0636   03A1 21 B8 04      lxi h, apogeyScreen3a_i
0637   03A4 35            dcr m
0638   03A5 C3 95 03      jmp l0
0639   03A8             l1:
0640   03A8               ; 6 if(FILL_EOL) 7 for(i = HEIGHT; i; --i) 
0641   03A8 3E 33         mvi a, 51
0642   03AA 32 B8 04      sta apogeyScreen3a_i
0643   03AD             l4:
0644   03AD               ; convertToConfition
0645   03AD 3A B8 04      lda apogeyScreen3a_i
0646   03B0 B7            ora a
0647   03B1 CA C4 03      jz l5
0648   03B4               ; 8 v += (BPL), *v = 0xF1; —ложение с BC
0649   03B4 21 4B 00      lxi h, 75
0650   03B7 09            dad b
0651   03B8 44            mov b, h
0652   03B9 4D            mov c, l
0653   03BA 3E F1         mvi a, 241
0654   03BC 02            stax b
0655   03BD             l6:
0656   03BD 21 B8 04      lxi h, apogeyScreen3a_i
0657   03C0 35            dcr m
0658   03C1 C3 AD 03      jmp l4
0659   03C4             l5:
0660   03C4               ; 9 ((uchar*)MEM_ADDR)[(HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+1] = 0xFF; 
0661   03C4 21 FF CF      lxi h, 53247
0662   03C7 36 FF         mvi m, 255
0663   03C9               ; 10 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*2 + 9; 
0664   03C9 21 16 C1      lxi h, 49430
0665   03CC 22 C1 04      shld apogeyVideoMem
0666   03CF               ; 11 apogeyVideoBpl = (BPL); 
0667   03CF 3E 4B         mvi a, 75
0668   03D1 32 C3 04      sta apogeyVideoBpl
0669   03D4               ; 1 ((uchar*)0xEF00)
0670   03D4 21 01 EF      lxi h, 61185
0671   03D7 36 00         mvi m, 0
0672   03D9               ; 1 ((uchar*)0xEF00)
0673   03D9 2D            dcr l
0674   03DA 36 4D         mvi m, 77
0675   03DC               ; 1 ((uchar*)0xEF00)
0676   03DC 36 7F         mvi m, 127
0677   03DE               ; 1 ((uchar*)0xEF00)
0678   03DE 36 33         mvi m, 51
0679   03E0               ; 1 ((uchar*)0xEF00)
0680   03E0 36 53         mvi m, 83
0681   03E2               ; 1 ((uchar*)0xEF00)
0682   03E2 2C            inr l
0683   03E3 36 23         mvi m, 35
0684   03E5               ; 7 while((VG75[1] & 0x20) == 0); 
0685   03E5             l13:
0686   03E5 3A 01 EF      lda 61185
0687   03E8 E6 20         ani 32
0688   03EA C2 F0 03      jnz l14
0689   03ED C3 E5 03      jmp l13
0690   03F0             l14:
0691   03F0               ; 8 while((VG75[1] & 0x20) == 0); 
0692   03F0             l15:
0693   03F0 3A 01 EF      lda 61185
0694   03F3 E6 20         ani 32
0695   03F5 C2 FB 03      jnz l16
0696   03F8 C3 F0 03      jmp l15
0697   03FB             l16:
0698   03FB               ; 1 ((uchar*)0xF000)
0699   03FB 21 08 F0      lxi h, 61448
0700   03FE 36 80         mvi m, 128
0701   0400               ; 1 ((uchar*)0xF000)
0702   0400 2E 04         mvi l, 4
0703   0402 36 FF         mvi m, 255
0704   0404               ; 1 ((uchar*)0xF000)
0705   0404 36 C0         mvi m, 192
0706   0406               ; 1 ((uchar*)0xF000)
0707   0406 2C            inr l
0708   0407 36 00         mvi m, 0
0709   0409               ; 1 ((uchar*)0xF000)
0710   0409 36 4F         mvi m, 79
0711   040B               ; 1 ((uchar*)0xF000)
0712   040B 2E 08         mvi l, 8
0713   040D 36 A4         mvi m, 164
0714   040F               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 
0715   040F FB           ei 
0716   0410               ; 15 asm { di } 
0717   0410 C1            pop b
0718   0411 C9            ret
0719   0412               ; --- fs_open -----------------------------------------------------------------
0720   0412             fs_open:
0721   0412 22 B9 04      shld fs_open_1
0722   0415               ; 5 return fs_open0(name, O_OPEN);
0723   0415 22 C4 04      shld fs_open0_1
0724   0418 AF            xra a
0725   0419 C3 91 04      jmp fs_open0
0726   041C C9            ret
0727   041D               ; --- apogeyScreen0 -----------------------------------------------------------------
0728   041D             apogeyScreen0:
0729   041D C5            push b
0730   041E               ; 3 memset((uchar*)(MEM_ADDR), 0, (FULL_HEIGHT)*(BPL)); 
0731   041E 21 D0 E1      lxi h, 57808
0732   0421 22 BC 04      shld memset_1
0733   0424 AF            xra a
0734   0425 32 BE 04      sta memset_2
0735   0428 21 24 09      lxi h, 2340
0736   042B CD 77 04      call memset
0737   042E               ; 4 if(FILL_EOL) { 5 v = (uchar*)(MEM_ADDR)-1; 9 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*(BPL) + ((HIDDEN_ATTRIB) ? 9 : 8); 
0738   042E 21 C2 E2      lxi h, 58050
0739   0431 22 C1 04      shld apogeyVideoMem
0740   0434               ; 10 apogeyVideoBpl = (BPL); 
0741   0434 3E 4E         mvi a, 78
0742   0436 32 C3 04      sta apogeyVideoBpl
0743   0439               ; 1 ((uchar*)0xEF00)
0744   0439 21 01 EF      lxi h, 61185
0745   043C 36 00         mvi m, 0
0746   043E               ; 1 ((uchar*)0xEF00)
0747   043E 2D            dcr l
0748   043F 36 4D         mvi m, 77
0749   0441               ; 1 ((uchar*)0xEF00)
0750   0441 36 1D         mvi m, 29
0751   0443               ; 1 ((uchar*)0xEF00)
0752   0443 36 99         mvi m, 153
0753   0445               ; 1 ((uchar*)0xEF00)
0754   0445 36 D3         mvi m, 211
0755   0447               ; 1 ((uchar*)0xEF00)
0756   0447 2C            inr l
0757   0448 36 23         mvi m, 35
0758   044A               ; 7 while((VG75[1] & 0x20) == 0); 
0759   044A             l31:
0760   044A 3A 01 EF      lda 61185
0761   044D E6 20         ani 32
0762   044F C2 55 04      jnz l32
0763   0452 C3 4A 04      jmp l31
0764   0455             l32:
0765   0455               ; 8 while((VG75[1] & 0x20) == 0); 
0766   0455             l33:
0767   0455 3A 01 EF      lda 61185
0768   0458 E6 20         ani 32
0769   045A C2 60 04      jnz l34
0770   045D C3 55 04      jmp l33
0771   0460             l34:
0772   0460               ; 1 ((uchar*)0xF000)
0773   0460 21 08 F0      lxi h, 61448
0774   0463 36 80         mvi m, 128
0775   0465               ; 1 ((uchar*)0xF000)
0776   0465 2E 04         mvi l, 4
0777   0467 36 D0         mvi m, 208
0778   0469               ; 1 ((uchar*)0xF000)
0779   0469 36 E1         mvi m, 225
0780   046B               ; 1 ((uchar*)0xF000)
0781   046B 2C            inr l
0782   046C 36 23         mvi m, 35
0783   046E               ; 1 ((uchar*)0xF000)
0784   046E 36 49         mvi m, 73
0785   0470               ; 1 ((uchar*)0xF000)
0786   0470 2E 08         mvi l, 8
0787   0472 36 A4         mvi m, 164
0788   0474               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
0789   0474 F3           di 
0790   0475 C1            pop b
0791   0476 C9            ret
0792   0477               ; --- memset -----------------------------------------------------------------
0793   0477             memset:
0794   0477 22 BF 04      shld memset_3
0795   047A               ; 2 asm {
0796   047A C5              push b
0797   047B 3A BE 04        lda memset_2
0798   047E EB              xchg
0799   047F 2A BC 04        lhld memset_1
0800   0482 EB              xchg
0801   0483 01 FF FF        lxi b, -1    
0802   0486             memset_l1:
0803   0486 09              dad b
0804   0487 D2 8F 04        jnc memset_l2
0805   048A 12              stax d
0806   048B 13              inx d
0807   048C C3 86 04        jmp memset_l1
0808   048F             memset_l2:
0809   048F C1              pop b
0810   0490               
0811   0490 C9            ret
0812   0491               ; --- fs_open0 -----------------------------------------------------------------
0813   0491             fs_open0:
0814   0491 32 C6 04      sta fs_open0_2
0815   0494               ; 5 asm {      
0816   0494                   
0817   0494 C5              PUSH B
0818   0495                 ; a = fs_open0_2
0819   0495 57              MOV  D, A 
0820   0496 2A C4 04        LHLD fs_open0_1
0821   0499 3E 02           MVI  A, 2
0822   049B CD 78 03        CALL fs_entry
0823   049E C1              POP  B
0824   049F               
0825   049F C9            ret
0826   04A0             main_i:
0827   04A0              .ds 2
0828   04A2             main_j:
0829   04A2              .ds 2
0830   04A4             main_c:
0831   04A4              .ds 1
0832   04A5             main_FifoReadPointer:
0833   04A5              .ds 2
0834   04A7             main_FifoWritePointer:
0835   04A7              .ds 2
0836   04A9             main_iNumberOfFrames:
0837   04A9              .ds 2
0838   04AB             main_iFrameCounter:
0839   04AB              .ds 2
0840   04AD             fs_cmdLine:
0841   04AD AF 04        .dw $+2
0842   04AF              .ds 1
0843   04B0             fs_selfName:
0844   04B0 B2 04        .dw $+2
0845   04B2              .ds 1
0846   04B3             fs_low:
0847   04B3              .ds 2
0848   04B5             fs_high:
0849   04B5              .ds 2
0850   04B7             fs_addr:
0851   04B7              .ds 1
0852   04B8             apogeyScreen3a_i:
0853   04B8              .ds 1
0854   04B9             fs_open_1:
0855   04B9              .ds 2
0856   04BB             apogeyScreen0_i:
0857   04BB              .ds 1
0858   04BC             memset_1:
0859   04BC              .ds 2
0860   04BE             memset_2:
0861   04BE              .ds 1
0862   04BF             memset_3:
0863   04BF              .ds 2
0864   04C1             apogeyVideoMem:
0865   04C1 C2 E2        .dw 58050
0866   04C3             
0867   04C3             apogeyVideoBpl:
0868   04C3 4E           .db 78
0869   04C4             
0870   04C4             fs_open0_1:
0871   04C4              .ds 2
0872   04C6             fs_open0_2:
0873   04C6              .ds 1
0874   04C7             string0:
0875   04C7 56 49 44 45  .db 86,73,68,69,79,47,65,80,80,76,69,46,65,80,86,0
0875   04CB 4F 2F 41 50 
0875   04CF 50 4C 45 2E 
0875   04D3 41 50 56 00 
0876   04D7               .end
tasm: Number of errors = 0
