0001   0000               .include "stdlib8080.inc"
0001+  0000               .org 0h
0002+  0000             entry:
0003+  0000 C3 03 00      jmp main
0004+  0003             
0002   0003             main:
0003   0003 21 57 FF    	  LXI  H, 0FF57h
0004   0006 7E          	  MOV A,M
0005   0007 FE 90       	  CPI 090h
0006   0009 C2 6F 00    	  JNZ Machine_Test_Not_Apogey
0007   000C 23          	  INX  H
0008   000D 7E          	  MOV A,M
0009   000E FE 61       	  CPI 061h
0010   0010 C2 6F 00    	  JNZ Machine_Test_Not_Apogey
0011   0013 23          	  INX  H
0012   0014 7E          	  MOV A,M
0013   0015 FE 70       	  CPI 070h
0014   0017 C2 6F 00    	  JNZ Machine_Test_Not_Apogey
0015   001A 23          	  INX  H
0016   001B 7E          	  MOV A,M
0017   001C FE 6F       	  CPI 06Fh
0018   001E C2 6F 00    	  JNZ Machine_Test_Not_Apogey
0019   0021 3E 00       	  MVI A,00
0020   0023 32 63 08    	  STA main_Machine_Type
0021   0026             	  ;apogey-specific init
0022   0026 21 00 EF    	  LXI  H, 0EF00h
0023   0029 22 4A 08    	  SHLD VG75
0024   002C 21 00 F0    	  LXI  H, 0F000h
0025   002F 22 4D 08    	  SHLD VT57
0026   0032 3E 01             MVI  A, 1		; Версия контроллера
0027   0034 01 17 DE          LXI  B, 0DE17h; BiosEntry  ; Точка входа SD BIOS
0028   0037 11 F3 DB          LXI  D, 0DBF3h; SELF_NAME  ; Собственное имя
0029   003A 21 F3 DC          LXI  H, 0DCF3h; CMD_LINE   ; Командная строка	 
0030   003D               
0031   003D               ; 66 fs_init();
0032   003D CD 05 08      call fs_init
0033   0040               ; 67 asm {
0034   0040             	  ;FIFO from 4000 to 7FFF - 16 KB total, ~8 full frames / ~80 packed frames
0035   0040 21 00 40    	  LXI H, 04000h
0036   0043 22 5B 08    	  SHLD main_FifoReadPointer
0037   0046 22 5D 08    	  SHLD main_FifoWritePointer
0038   0049 3E 7C       	  MVI A, 07Ch
0039   004B 32 65 08    	  STA main_Fifo_Write_Threshold_1
0040   004E 3E 45       	  MVI A, 045h
0041   0050 32 66 08    	  STA main_Fifo_Write_Threshold_2
0042   0053 3E 80       	  MVI A, 080h
0043   0055 32 67 08    	  STA main_Fifo_Write_Threshold_3
0044   0058 3E 40       	  MVI A, 040h
0045   005A 32 68 08    	  STA main_Fifo_Write_Threshold_4
0046   005D 3E 30       	  MVI A, 030h
0047   005F 32 69 08    	  STA main_Fifo_Read_Threshold_1
0048   0062 3E 10       	  MVI A, 010h
0049   0064 32 6A 08    	  STA main_Fifo_Read_Threshold_2
0050   0067 3E 40       	  MVI A, 040h
0051   0069 32 6B 08    	  STA main_Fifo_Read_Threshold_3
0052   006C               	  ;apogey-specific init done
0053   006C C3 E4 00    	  JMP Machine_Test_Done
0054   006F             Machine_Test_Not_Apogey:
0055   006F 21 5B FF    	  LXI  H, 0FF5Bh
0056   0072 7E          	  MOV A,M
0057   0073 FE 72       	  CPI 072h
0058   0075 C2 DB 00    	  JNZ Machine_Test_Not_Radio
0059   0078 23          	  INX  H
0060   0079 7E          	  MOV A,M
0061   007A FE 61       	  CPI 061h
0062   007C C2 DB 00    	  JNZ Machine_Test_Not_Radio
0063   007F 23          	  INX  H
0064   0080 7E          	  MOV A,M
0065   0081 FE 64       	  CPI 064h
0066   0083 C2 DB 00    	  JNZ Machine_Test_Not_Radio
0067   0086 23          	  INX  H
0068   0087 7E          	  MOV A,M
0069   0088 FE 69       	  CPI 069h
0070   008A C2 DB 00    	  JNZ Machine_Test_Not_Radio
0071   008D 3E 01       	  MVI A,01
0072   008F 32 63 08    	  STA main_Machine_Type
0073   0092             	  ;radio-specific init
0074   0092 21 00 C0    	  LXI  H, 0C000h
0075   0095 22 4A 08    	  SHLD VG75
0076   0098 21 00 E0    	  LXI  H, 0E000h
0077   009B 22 4D 08    	  SHLD VT57
0078   009E 3E 01             MVI  A, 1		; Версия контроллера
0079   00A0 01 17 74          LXI  B, 07417h; BiosEntry  ; Точка входа SD BIOS
0080   00A3 11 F3 71          LXI  D, 071F3h; SELF_NAME  ; Собственное имя
0081   00A6 21 F3 72          LXI  H, 072F3h; CMD_LINE   ; Командная строка	  
0082   00A9               
0083   00A9               ; 117 fs_init();
0084   00A9 CD 05 08      call fs_init
0085   00AC               ; 118 asm {
0086   00AC             	  ;FIFO from 2000 to 5FFF - 16 KB total, ~8 full frames / ~50 packed frames
0087   00AC 21 00 20    	  LXI H, 02000h
0088   00AF 22 5B 08    	  SHLD main_FifoReadPointer
0089   00B2 22 5D 08    	  SHLD main_FifoWritePointer
0090   00B5 3E 5C       	  MVI A, 05Ch
0091   00B7 32 65 08    	  STA main_Fifo_Write_Threshold_1
0092   00BA 3E 25       	  MVI A, 025h
0093   00BC 32 66 08    	  STA main_Fifo_Write_Threshold_2
0094   00BF 3E 60       	  MVI A, 060h
0095   00C1 32 67 08    	  STA main_Fifo_Write_Threshold_3
0096   00C4 3E 20       	  MVI A, 020h
0097   00C6 32 68 08    	  STA main_Fifo_Write_Threshold_4
0098   00C9 3E 30       	  MVI A, 030h
0099   00CB 32 69 08    	  STA main_Fifo_Read_Threshold_1
0100   00CE 3E 10       	  MVI A, 010h
0101   00D0 32 6A 08    	  STA main_Fifo_Read_Threshold_2
0102   00D3 3E 40       	  MVI A, 040h
0103   00D5 32 6B 08    	  STA main_Fifo_Read_Threshold_3
0104   00D8               	  ;radio-specific init done
0105   00D8 C3 E4 00    	  JMP Machine_Test_Done
0106   00DB             Machine_Test_Not_Radio:
0107   00DB 21 64 02    	  LXI H, str_Unknown_Machine
0108   00DE CD 18 F8    	  CALL 0F818h ;using standard monitor function on unknown machines
0109   00E1 C3 75 F8    	  JMP 0F875h ;jump to monitor
0110   00E4             Machine_Test_Done:
0111   00E4               
0112   00E4               ; 146 asm {
0113   00E4             
0114   00E4               
0115   00E4               ; 151 VG75[1] = 0x80;—ложение с константой 1
0116   00E4 2A 4A 08      lhld VG75
0117   00E7 23            inx h
0118   00E8 36 80         mvi m, 128
0119   00EA               ; 152 VG75[0] = 0xFF;—ложение с константой 0
0120   00EA 2A 4A 08      lhld VG75
0121   00ED 36 FF         mvi m, 255
0122   00EF               ; 153 VG75[0] = 0xFF;—ложение с константой 0
0123   00EF 36 FF         mvi m, 255
0124   00F1               ; 155 fs_open("VIDEO/APPLE.APV");
0125   00F1 21 86 08      lxi h, string0
0126   00F4 CD 16 08      call fs_open
0127   00F7               ; 158 asm{
0128   00F7 2A 5B 08    	LHLD main_FifoReadPointer
0129   00FA EB          	XCHG
0130   00FB 21 00 01    	LXI H, 00100h ; header 256 bytes
0131   00FE 3E 04           MVI  A, 004h;read command
0132   0100 CD 12 08    	CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0133   0103 2A 5B 08    	LHLD main_FifoReadPointer
0134   0106 7C          	MOV A,H
0135   0107 32 64 08    	STA main_Screen_Type
0136   010A FE 00       	CPI 0h
0137   010C C2 15 01    	JNZ SetScreen128x60
0138   010F             SetScreen192x102:
0139   010F             	
0140   010F               ; 171 apogey_hires();
0141   010F CD 75 02      call apogey_hires
0142   0112               ; 173 asm {
0143   0112 C3 26 01    	JMP SetScreenDone
0144   0115             SetScreen128x60:
0145   0115 3A 63 08    	LDA main_Machine_Type
0146   0118 FE 00       	CPI 0 ;is apogey?
0147   011A C2 23 01    	JNZ SetScreen128x60_Radio
0148   011D             	
0149   011D               ; 180 apogey_lores();
0150   011D CD 3A 03      call apogey_lores
0151   0120               ; 182 asm{
0152   0120 C3 26 01    	JMP SetScreenDone
0153   0123             SetScreen128x60_Radio:
0154   0123             	
0155   0123               ; 186 radio_lores();
0156   0123 CD FF 03      call radio_lores
0157   0126               ; 190 asm
0158   0126             SetScreenDone:
0159   0126 2A 5B 08    	LHLD main_FifoReadPointer
0160   0129 11 04 00    	LXI D,4
0161   012C 19          	DAD D
0162   012D 5E          	MOV E,M
0163   012E 23          	INX H
0164   012F 56          	MOV D,M
0165   0130 EB          	XCHG
0166   0131 22 5F 08    	SHLD main_iNumberOfFrames
0167   0134               
0168   0134               ; 204 asm {
0169   0134 2A 5D 08    	  LHLD main_FifoWritePointer
0170   0137 EB          	  XCHG
0171   0138 21 00 30    	  LXI H, 03000h ; размер передачи 12k
0172   013B 3E 04             MVI  A, 004h;read command
0173   013D CD 12 08    	  CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0174   0140 2A 5D 08    	  LHLD main_FifoWritePointer
0175   0143 11 00 30    	  LXI D, 03000h
0176   0146 19          	  DAD D
0177   0147 22 5D 08    	  SHLD main_FifoWritePointer
0178   014A               
0179   014A               ; 216 iFrameCounter = iNumberOfFrames;
0180   014A 2A 5F 08      lhld main_iNumberOfFrames
0181   014D 22 61 08      shld main_iFrameCounter
0182   0150               ; 218 asm{
0183   0150             Main_Loop_Start:
0184   0150 2A 61 08    	LHLD main_iFrameCounter
0185   0153 AF          	XRA A ; A=0
0186   0154 BC          	CMP H
0187   0155 C2 5F 01    	JNZ Fifo_Write_Start
0188   0158 BD          	CMP L
0189   0159 C2 5F 01    	JNZ Fifo_Write_Start
0190   015C C3 50 02    	JMP Do_Exit
0191   015F             Fifo_Write_Start:
0192   015F             	; first check if we have enough free space in fifo, granularity is 1024 bytes
0193   015F             	; fifo is almost full when either (write!=7C00 and read-write>0 and read-write-8 < 0), or ( write=7C00 and (read> 7C00 or read < 4400) )
0194   015F 2A 5D 08    	LHLD main_FifoWritePointer
0195   0162 3A 65 08    	LDA main_Fifo_Write_Threshold_1
0196   0165 BC          	CMP H
0197   0166 CA 7D 01    	JZ Fifo_Write_Start2
0198   0169             	;not end-buffer case, check read-write>0
0199   0169 2A 5B 08    	LHLD main_FifoReadPointer
0200   016C 7C          	MOV A,H
0201   016D 2A 5D 08    	LHLD main_FifoWritePointer
0202   0170 BC          	CMP H
0203   0171 FA 95 01    	JM Fifo_Write_Do ;read-write < 0, not skipping
0204   0174             	;check read-write-8 < 0
0205   0174 94          	SUB H
0206   0175 D6 08       	SUI 08h
0207   0177 F2 95 01    	JP Fifo_Write_Do ;read-write-8 > 0, not skipping
0208   017A C3 B6 01    	JMP Fifo_Read_Start ;skipping after all
0209   017D             Fifo_Write_Start2:
0210   017D             	;end-buffer case, checking if read > 7C00 (not wrapped) 
0211   017D 3A 65 08    	LDA main_Fifo_Write_Threshold_1
0212   0180 47          	MOV B,A
0213   0181 2A 5B 08    	LHLD main_FifoReadPointer
0214   0184 7C          	MOV A,H
0215   0185 B8          	CMP B
0216   0186 F2 B6 01    	JP Fifo_Read_Start ;read is > 7C00, skipping write
0217   0189             	;now check if read < 4400 (wrapped)
0218   0189 3A 66 08    	LDA main_Fifo_Write_Threshold_2
0219   018C 47          	MOV B,A	
0220   018D 7C          	MOV A,H
0221   018E B8          	CMP B
0222   018F FA B6 01    	JM Fifo_Read_Start ;read is < 4400, skipping write
0223   0192 C3 95 01    	JMP Fifo_Write_Do ;writing after all
0224   0195             Fifo_Write_Do:
0225   0195 2A 5D 08    	LHLD main_FifoWritePointer
0226   0198 EB          	XCHG
0227   0199 21 00 04    	LXI H, 00400h ; размер передачи 1024 байт
0228   019C 3E 04           MVI  A, 004h;read command
0229   019E CD 12 08    	CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0230   01A1 2A 5D 08    	LHLD main_FifoWritePointer
0231   01A4 3E 04       	MVI A, 004h
0232   01A6 84          	ADD H
0233   01A7 67          	MOV H, A
0234   01A8 3A 67 08    	LDA main_Fifo_Write_Threshold_3
0235   01AB BC          	CMP H
0236   01AC C2 B3 01    	JNZ Fifo_Write_Do2 ;if fifo write pointer is not at 0x8000, move on
0237   01AF 3A 68 08    	LDA main_Fifo_Write_Threshold_4
0238   01B2 67          	MOV H,A ; else wrap back to 0x4000 and move on
0239   01B3             Fifo_Write_Do2:	
0240   01B3 22 5D 08    	SHLD main_FifoWritePointer
0241   01B6             
0242   01B6             	
0243   01B6             Fifo_Read_Start:
0244   01B6             	;first thing to do is to check that we have at least full frame worth of fifo data
0245   01B6             	;if we dont, wait for fifo to fill up
0246   01B6             	;there are 2 cases of empty fifo: (write > read) and (write - read < 16) (normal case),
0247   01B6             	;								or (write < read) and (read - write > 48) (wrap case)
0248   01B6 2A 5D 08    	LHLD main_FifoWritePointer
0249   01B9 7C          	MOV A,H
0250   01BA 2A 5B 08    	LHLD main_FifoReadPointer
0251   01BD 94          	SUB H
0252   01BE F2 D8 01    	JP Fifo_Read_Normal
0253   01C1             	;wrap case, calculating (read - write) instead
0254   01C1 3A 69 08    	LDA main_Fifo_Read_Threshold_1
0255   01C4 47          	MOV B,A
0256   01C5 3A 6A 08    	LDA main_Fifo_Read_Threshold_2
0257   01C8 4F          	MOV C,A
0258   01C9 2A 5B 08    	LHLD main_FifoReadPointer
0259   01CC 7C          	MOV A,H
0260   01CD 2A 5D 08    	LHLD main_FifoWritePointer
0261   01D0 94          	SUB H
0262   01D1             	;ok, weve got (read - write),it should be positive. now check if its bigger than 48
0263   01D1 90          	SUB B
0264   01D2 F2 50 01    	JP Main_Loop_Start ;it IS bigger, meaning FIFO is almost empty, skipping read
0265   01D5 C3 DC 01    	JMP Fifo_Read_Do
0266   01D8             Fifo_Read_Normal:
0267   01D8             	;normal case, diff (write - read) is already in A, checking if its bigger than 16
0268   01D8 91          	SUB C
0269   01D9 FA 50 01    	JM Main_Loop_Start ;it is NOT bigger, meaning FIFO is almost empty, skipping read	
0270   01DC             Fifo_Read_Do:
0271   01DC             	;decrease frame counter
0272   01DC 2A 61 08    	LHLD main_iFrameCounter
0273   01DF 2B          	DCX H
0274   01E0 22 61 08    	SHLD main_iFrameCounter
0275   01E3             	;okay, FIFO is not empty, but current frame might be wrapping around FIFO end
0276   01E3             	;we check this by adding frame size to read pointer
0277   01E3 2A 5B 08    	LHLD main_FifoReadPointer
0278   01E6 23          	INX H
0279   01E7 23          	INX H
0280   01E8 5E          	MOV E,M
0281   01E9 23          	INX H
0282   01EA 56          	MOV D,M
0283   01EB 23          	INX H
0284   01EC 19          	DAD D
0285   01ED 3A 67 08    	LDA main_Fifo_Write_Threshold_3
0286   01F0 47          	MOV B,A
0287   01F1 7C          	MOV A,H
0288   01F2 90          	SUB B
0289   01F3 FA 36 02    	JM Fifo_Read_Do2 ;if frame is NOT wrapped, unpack it as is
0290   01F6             	;frame IS wrapped, copy part that doesnt fit from 4000 to 8000
0291   01F6             	;HL still stores overwrapped value, so use that
0292   01F6 E5          	PUSH H
0293   01F7 C1          	POP B
0294   01F8 78          	MOV A,B
0295   01F9 E6 0F       	ANI 00Fh
0296   01FB 47          	MOV B,A ;now we have a size in BC
0297   01FC AF          	XRA A ; A=0
0298   01FD 6F          	MOV L,A
0299   01FE 5F          	MOV E,A
0300   01FF 3A 68 08    	LDA main_Fifo_Write_Threshold_4
0301   0202 67          	MOV H,A
0302   0203 3A 67 08    	LDA main_Fifo_Write_Threshold_3
0303   0206 57          	MOV D,A
0304   0207             Fifo_Read_Copy_Loop:
0305   0207 7E          	MOV A,M
0306   0208 12          	STAX D
0307   0209 23          	INX H
0308   020A 13          	INX D
0309   020B 0B          	DCX B
0310   020C AF          	XRA A ; A=0
0311   020D B8          	CMP B
0312   020E C2 07 02    	JNZ Fifo_Read_Copy_Loop
0313   0211 B9          	CMP C
0314   0212 C2 07 02    	JNZ Fifo_Read_Copy_Loop
0315   0215             	;copy done, now processing frame as-is
0316   0215             	;we should init DE and HL before calling unpack
0317   0215 2A 54 08    	LHLD ScreenStartPointer
0318   0218 EB          	XCHG
0319   0219 2A 5B 08    	LHLD main_FifoReadPointer
0320   021C CD D6 05    	CALL unpack_btree1
0321   021F             	;now move read pointer
0322   021F 2A 5B 08    	LHLD main_FifoReadPointer
0323   0222 23          	INX H
0324   0223 23          	INX H
0325   0224 5E          	MOV E,M
0326   0225 23          	INX H
0327   0226 56          	MOV D,M
0328   0227 23          	INX H
0329   0228 19          	DAD D
0330   0229 3A 6B 08    	LDA main_Fifo_Read_Threshold_3
0331   022C 47          	MOV B,A
0332   022D 7C          	MOV A,H
0333   022E 90          	SUB B
0334   022F 67          	MOV H,A
0335   0230 22 5B 08    	SHLD main_FifoReadPointer
0336   0233 C3 50 01    	JMP Main_Loop_Start ;go back to mail loop start	
0337   0236             	
0338   0236             Fifo_Read_Do2:	
0339   0236             	;non-wrapped unpack
0340   0236             	;we should init DE before calling unpack
0341   0236 2A 54 08    	LHLD ScreenStartPointer
0342   0239 EB          	XCHG
0343   023A 2A 5B 08    	LHLD main_FifoReadPointer
0344   023D CD D6 05    	CALL unpack_btree1
0345   0240             	;now move read pointer
0346   0240 2A 5B 08    	LHLD main_FifoReadPointer
0347   0243 23          	INX H
0348   0244 23          	INX H
0349   0245 5E          	MOV E,M
0350   0246 23          	INX H
0351   0247 56          	MOV D,M
0352   0248 23          	INX H
0353   0249 19          	DAD D
0354   024A 22 5B 08    	SHLD main_FifoReadPointer
0355   024D C3 50 01    	JMP Main_Loop_Start ;go back to mail loop start
0356   0250             
0357   0250             Do_Exit:
0358   0250               
0359   0250               ; 396 asm{
0360   0250 3A 63 08    	LDA main_Machine_Type
0361   0253 FE 00       	CPI 0 ;is apogey?
0362   0255 C2 5E 02    	JNZ Do_Exit_Radio
0363   0258 CD C4 04    	call apogey_stdmode
0364   025B C3 75 F8    	JMP 0F875h ;jump to monitor
0365   025E             Do_Exit_Radio:
0366   025E CD 4D 05    	call rk_stdmode
0367   0261 C3 75 F8    	JMP 0F875h ;jump to monitor	
0368   0264             	
0369   0264               ; 407 asm{
0370   0264 55 4E 4B 4E str_Unknown_Machine:	.db "UNKNOWN MACHINE",0
0370   0268 4F 57 4E 20 
0370   026C 4D 41 43 48 
0370   0270 49 4E 45 00 
0371   0274             	
0372   0274 C9            ret
0373   0275               ; --- apogey_hires -----------------------------------------------------------------
0374   0275             apogey_hires:
0375   0275 C5            push b
0376   0276               ; 3 memset((uchar*)MEM_ADDR, 0, (HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+2); 
0377   0276 21 00 C1      lxi h, 49408
0378   0279 22 7E 08      shld memset_1
0379   027C AF            xra a
0380   027D 32 80 08      sta memset_2
0381   0280 21 01 0F      lxi h, 3841
0382   0283 CD 21 08      call memset
0383   0286               ; 4 for(v=(uchar*)(MEM_ADDR)-1, i=TOP_INVISIBLE; i; --i) 
0384   0286 01 FF C0      lxi b, 49407
0385   0289 3E 07         mvi a, 7
0386   028B 32 6C 08      sta apogey_hires_i
0387   028E             l0:
0388   028E               ; convertToConfition
0389   028E 3A 6C 08      lda apogey_hires_i
0390   0291 B7            ora a
0391   0292 CA A1 02      jz l1
0392   0295               ; 5 v+=2, *v = 0xF1; —ложение BC с константой 2
0393   0295 03            inx b
0394   0296 03            inx b
0395   0297 3E F1         mvi a, 241
0396   0299 02            stax b
0397   029A             l2:
0398   029A 21 6C 08      lxi h, apogey_hires_i
0399   029D 35            dcr m
0400   029E C3 8E 02      jmp l0
0401   02A1             l1:
0402   02A1               ; 6 if(FILL_EOL) 7 for(i = HEIGHT; i; --i) 
0403   02A1 3E 33         mvi a, 51
0404   02A3 32 6C 08      sta apogey_hires_i
0405   02A6             l4:
0406   02A6               ; convertToConfition
0407   02A6 3A 6C 08      lda apogey_hires_i
0408   02A9 B7            ora a
0409   02AA CA BD 02      jz l5
0410   02AD               ; 8 v += (BPL), *v = 0xF1; —ложение с BC
0411   02AD 21 4B 00      lxi h, 75
0412   02B0 09            dad b
0413   02B1 44            mov b, h
0414   02B2 4D            mov c, l
0415   02B3 3E F1         mvi a, 241
0416   02B5 02            stax b
0417   02B6             l6:
0418   02B6 21 6C 08      lxi h, apogey_hires_i
0419   02B9 35            dcr m
0420   02BA C3 A6 02      jmp l4
0421   02BD             l5:
0422   02BD               ; 9 ((uchar*)MEM_ADDR)[(HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+1] = 0xFF; 
0423   02BD 21 00 D0      lxi h, 53248
0424   02C0 36 FF         mvi m, 255
0425   02C2               ; 10 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*2 + 9; 
0426   02C2 21 17 C1      lxi h, 49431
0427   02C5 22 50 08      shld apogeyVideoMem
0428   02C8               ; 11 apogeyVideoBpl = (BPL); 
0429   02C8 3E 4B         mvi a, 75
0430   02CA 32 53 08      sta apogeyVideoBpl
0431   02CD               ; 1 VG75[1] = 0; —ложение с константой 1
0432   02CD 2A 4A 08      lhld VG75
0433   02D0 23            inx h
0434   02D1 36 00         mvi m, 0
0435   02D3               ; 2 VG75[0] = 78-1; —ложение с константой 0
0436   02D3 2A 4A 08      lhld VG75
0437   02D6 36 4D         mvi m, 77
0438   02D8               ; 3 VG75[0] = (((FONT&0xF) >= 9) ? 0 : 0x40) | (FULL_HEIGHT-1); —ложение с константой 0
0439   02D8 36 7F         mvi m, 127
0440   02DA               ; 4 VG75[0] = FONT; —ложение с константой 0
0441   02DA 36 33         mvi m, 51
0442   02DC               ; 5 VG75[0] = ((HIDDEN_ATTRIB) ? 0 : 0x40) | ((FONT&0xF)==9 ? 0x80 : 0) | 0x13; —ложение с константой 0
0443   02DC 36 53         mvi m, 83
0444   02DE               ; 6 VG75[1] = 0x23; —ложение с константой 1
0445   02DE 23            inx h
0446   02DF 36 23         mvi m, 35
0447   02E1               ; 7 while((VG75[1] & 0x20) == 0); 
0448   02E1             l13:
0449   02E1               ; —ложение с константой 1
0450   02E1 2A 4A 08      lhld VG75
0451   02E4 23            inx h
0452   02E5 7E            mov a, m
0453   02E6 E6 20         ani 32
0454   02E8 C2 EE 02      jnz l14
0455   02EB C3 E1 02      jmp l13
0456   02EE             l14:
0457   02EE               ; 8 while((VG75[1] & 0x20) == 0); 
0458   02EE             l15:
0459   02EE               ; —ложение с константой 1
0460   02EE 2A 4A 08      lhld VG75
0461   02F1 23            inx h
0462   02F2 7E            mov a, m
0463   02F3 E6 20         ani 32
0464   02F5 C2 FB 02      jnz l16
0465   02F8 C3 EE 02      jmp l15
0466   02FB             l16:
0467   02FB               ; 9 VT57[8] = 0x80; —ложение
0468   02FB 2A 4D 08      lhld VT57
0469   02FE 11 08 00      lxi d, 8
0470   0301 19            dad d
0471   0302 36 80         mvi m, 128
0472   0304               ; 10 VT57[4] = (uchar)(MEM_ADDR); —ложение с константой 4
0473   0304 2A 4D 08      lhld VT57
0474   0307 23            inx h
0475   0308 23            inx h
0476   0309 23            inx h
0477   030A 23            inx h
0478   030B 36 00         mvi m, 0
0479   030D               ; 11 VT57[4] = (uchar)((MEM_ADDR)>>8); —ложение с константой 4
0480   030D 2A 4D 08      lhld VT57
0481   0310 23            inx h
0482   0311 23            inx h
0483   0312 23            inx h
0484   0313 23            inx h
0485   0314 36 C1         mvi m, 193
0486   0316               ; 12 VT57[5] = (uchar)((MEM_SIZE)-1); —ложение
0487   0316 2A 4D 08      lhld VT57
0488   0319 11 05 00      lxi d, 5
0489   031C 19            dad d
0490   031D 36 00         mvi m, 0
0491   031F               ; 13 VT57[5] = 0x40 | (uchar)(((MEM_SIZE)-1)>>8); —ложение
0492   031F 2A 4D 08      lhld VT57
0493   0322 11 05 00      lxi d, 5
0494   0325 19            dad d
0495   0326 36 4F         mvi m, 79
0496   0328               ; 14 VT57[8] = 0xA4; —ложение
0497   0328 2A 4D 08      lhld VT57
0498   032B 11 08 00      lxi d, 8
0499   032E 19            dad d
0500   032F 36 A4         mvi m, 164
0501   0331               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 
0502   0331 FB           ei 
0503   0332               ; 15 asm { di } 416 ScreenStartPointer = (void*)0xC113;
0504   0332 21 13 C1      lxi h, 49427
0505   0335 22 54 08      shld ScreenStartPointer
0506   0338 C1            pop b
0507   0339 C9            ret
0508   033A               ; --- apogey_lores -----------------------------------------------------------------
0509   033A             apogey_lores:
0510   033A C5            push b
0511   033B               ; 3 memset((uchar*)MEM_ADDR, 0, (HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+2); 
0512   033B 21 D0 E1      lxi h, 57808
0513   033E 22 7E 08      shld memset_1
0514   0341 AF            xra a
0515   0342 32 80 08      sta memset_2
0516   0345 21 1D 09      lxi h, 2333
0517   0348 CD 21 08      call memset
0518   034B               ; 4 for(v=(uchar*)(MEM_ADDR)-1, i=TOP_INVISIBLE; i; --i) 
0519   034B 01 CF E1      lxi b, 57807
0520   034E 3E 03         mvi a, 3
0521   0350 32 6D 08      sta apogey_lores_i
0522   0353             l19:
0523   0353               ; convertToConfition
0524   0353 3A 6D 08      lda apogey_lores_i
0525   0356 B7            ora a
0526   0357 CA 66 03      jz l20
0527   035A               ; 5 v+=2, *v = 0xF1; —ложение BC с константой 2
0528   035A 03            inx b
0529   035B 03            inx b
0530   035C 3E F1         mvi a, 241
0531   035E 02            stax b
0532   035F             l21:
0533   035F 21 6D 08      lxi h, apogey_lores_i
0534   0362 35            dcr m
0535   0363 C3 53 03      jmp l19
0536   0366             l20:
0537   0366               ; 6 if(FILL_EOL) 7 for(i = HEIGHT; i; --i) 
0538   0366 3E 1F         mvi a, 31
0539   0368 32 6D 08      sta apogey_lores_i
0540   036B             l23:
0541   036B               ; convertToConfition
0542   036B 3A 6D 08      lda apogey_lores_i
0543   036E B7            ora a
0544   036F CA 82 03      jz l24
0545   0372               ; 8 v += (BPL), *v = 0xF1; —ложение с BC
0546   0372 21 4B 00      lxi h, 75
0547   0375 09            dad b
0548   0376 44            mov b, h
0549   0377 4D            mov c, l
0550   0378 3E F1         mvi a, 241
0551   037A 02            stax b
0552   037B             l25:
0553   037B 21 6D 08      lxi h, apogey_lores_i
0554   037E 35            dcr m
0555   037F C3 6B 03      jmp l23
0556   0382             l24:
0557   0382               ; 9 ((uchar*)MEM_ADDR)[(HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+1] = 0xFF; 
0558   0382 21 EC EA      lxi h, 60140
0559   0385 36 FF         mvi m, 255
0560   0387               ; 10 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*2 + 9; 
0561   0387 21 DF E1      lxi h, 57823
0562   038A 22 50 08      shld apogeyVideoMem
0563   038D               ; 11 apogeyVideoBpl = (BPL); 
0564   038D 3E 4B         mvi a, 75
0565   038F 32 53 08      sta apogeyVideoBpl
0566   0392               ; 1 VG75[1] = 0; —ложение с константой 1
0567   0392 2A 4A 08      lhld VG75
0568   0395 23            inx h
0569   0396 36 00         mvi m, 0
0570   0398               ; 2 VG75[0] = 78-1; —ложение с константой 0
0571   0398 2A 4A 08      lhld VG75
0572   039B 36 4D         mvi m, 77
0573   039D               ; 3 VG75[0] = (((FONT&0xF) >= 9) ? 0 : 0x40) | (FULL_HEIGHT-1); —ложение с константой 0
0574   039D 36 64         mvi m, 100
0575   039F               ; 4 VG75[0] = FONT; —ложение с константой 0
0576   039F 36 77         mvi m, 119
0577   03A1               ; 5 VG75[0] = ((HIDDEN_ATTRIB) ? 0 : 0x40) | ((FONT&0xF)==9 ? 0x80 : 0) | 0x13; —ложение с константой 0
0578   03A1 36 53         mvi m, 83
0579   03A3               ; 6 VG75[1] = 0x23; —ложение с константой 1
0580   03A3 23            inx h
0581   03A4 36 23         mvi m, 35
0582   03A6               ; 7 while((VG75[1] & 0x20) == 0); 
0583   03A6             l32:
0584   03A6               ; —ложение с константой 1
0585   03A6 2A 4A 08      lhld VG75
0586   03A9 23            inx h
0587   03AA 7E            mov a, m
0588   03AB E6 20         ani 32
0589   03AD C2 B3 03      jnz l33
0590   03B0 C3 A6 03      jmp l32
0591   03B3             l33:
0592   03B3               ; 8 while((VG75[1] & 0x20) == 0); 
0593   03B3             l34:
0594   03B3               ; —ложение с константой 1
0595   03B3 2A 4A 08      lhld VG75
0596   03B6 23            inx h
0597   03B7 7E            mov a, m
0598   03B8 E6 20         ani 32
0599   03BA C2 C0 03      jnz l35
0600   03BD C3 B3 03      jmp l34
0601   03C0             l35:
0602   03C0               ; 9 VT57[8] = 0x80; —ложение
0603   03C0 2A 4D 08      lhld VT57
0604   03C3 11 08 00      lxi d, 8
0605   03C6 19            dad d
0606   03C7 36 80         mvi m, 128
0607   03C9               ; 10 VT57[4] = (uchar)(MEM_ADDR); —ложение с константой 4
0608   03C9 2A 4D 08      lhld VT57
0609   03CC 23            inx h
0610   03CD 23            inx h
0611   03CE 23            inx h
0612   03CF 23            inx h
0613   03D0 36 D0         mvi m, 208
0614   03D2               ; 11 VT57[4] = (uchar)((MEM_ADDR)>>8); —ложение с константой 4
0615   03D2 2A 4D 08      lhld VT57
0616   03D5 23            inx h
0617   03D6 23            inx h
0618   03D7 23            inx h
0619   03D8 23            inx h
0620   03D9 36 E1         mvi m, 225
0621   03DB               ; 12 VT57[5] = (uchar)((MEM_SIZE)-1); —ложение
0622   03DB 2A 4D 08      lhld VT57
0623   03DE 11 05 00      lxi d, 5
0624   03E1 19            dad d
0625   03E2 36 1C         mvi m, 28
0626   03E4               ; 13 VT57[5] = 0x40 | (uchar)(((MEM_SIZE)-1)>>8); —ложение
0627   03E4 2A 4D 08      lhld VT57
0628   03E7 11 05 00      lxi d, 5
0629   03EA 19            dad d
0630   03EB 36 49         mvi m, 73
0631   03ED               ; 14 VT57[8] = 0xA4; —ложение
0632   03ED 2A 4D 08      lhld VT57
0633   03F0 11 08 00      lxi d, 8
0634   03F3 19            dad d
0635   03F4 36 A4         mvi m, 164
0636   03F6               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
0637   03F6 F3           di 
0638   03F7               ; 421 ScreenStartPointer = (void*)0xE1DA;
0639   03F7 21 DA E1      lxi h, 57818
0640   03FA 22 54 08      shld ScreenStartPointer
0641   03FD C1            pop b
0642   03FE C9            ret
0643   03FF               ; --- radio_lores -----------------------------------------------------------------
0644   03FF             radio_lores:
0645   03FF C5            push b
0646   0400               ; 3 memset((uchar*)MEM_ADDR, 0, (HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+2); 
0647   0400 21 D0 76      lxi h, 30416
0648   0403 22 7E 08      shld memset_1
0649   0406 AF            xra a
0650   0407 32 80 08      sta memset_2
0651   040A 21 1D 09      lxi h, 2333
0652   040D CD 21 08      call memset
0653   0410               ; 4 for(v=(uchar*)(MEM_ADDR)-1, i=TOP_INVISIBLE; i; --i) 
0654   0410 01 CF 76      lxi b, 30415
0655   0413 3E 03         mvi a, 3
0656   0415 32 6E 08      sta radio_lores_i
0657   0418             l38:
0658   0418               ; convertToConfition
0659   0418 3A 6E 08      lda radio_lores_i
0660   041B B7            ora a
0661   041C CA 2B 04      jz l39
0662   041F               ; 5 v+=2, *v = 0xF1; —ложение BC с константой 2
0663   041F 03            inx b
0664   0420 03            inx b
0665   0421 3E F1         mvi a, 241
0666   0423 02            stax b
0667   0424             l40:
0668   0424 21 6E 08      lxi h, radio_lores_i
0669   0427 35            dcr m
0670   0428 C3 18 04      jmp l38
0671   042B             l39:
0672   042B               ; 6 if(FILL_EOL) 7 for(i = HEIGHT; i; --i) 
0673   042B 3E 1F         mvi a, 31
0674   042D 32 6E 08      sta radio_lores_i
0675   0430             l42:
0676   0430               ; convertToConfition
0677   0430 3A 6E 08      lda radio_lores_i
0678   0433 B7            ora a
0679   0434 CA 47 04      jz l43
0680   0437               ; 8 v += (BPL), *v = 0xF1; —ложение с BC
0681   0437 21 4B 00      lxi h, 75
0682   043A 09            dad b
0683   043B 44            mov b, h
0684   043C 4D            mov c, l
0685   043D 3E F1         mvi a, 241
0686   043F 02            stax b
0687   0440             l44:
0688   0440 21 6E 08      lxi h, radio_lores_i
0689   0443 35            dcr m
0690   0444 C3 30 04      jmp l42
0691   0447             l43:
0692   0447               ; 9 ((uchar*)MEM_ADDR)[(HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+1] = 0xFF; 
0693   0447 21 EC 7F      lxi h, 32748
0694   044A 36 FF         mvi m, 255
0695   044C               ; 10 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*2 + 9; 
0696   044C 21 DF 76      lxi h, 30431
0697   044F 22 50 08      shld apogeyVideoMem
0698   0452               ; 11 apogeyVideoBpl = (BPL); 
0699   0452 3E 4B         mvi a, 75
0700   0454 32 53 08      sta apogeyVideoBpl
0701   0457               ; 1 VG75[1] = 0; —ложение с константой 1
0702   0457 2A 4A 08      lhld VG75
0703   045A 23            inx h
0704   045B 36 00         mvi m, 0
0705   045D               ; 2 VG75[0] = 78-1; —ложение с константой 0
0706   045D 2A 4A 08      lhld VG75
0707   0460 36 4D         mvi m, 77
0708   0462               ; 3 VG75[0] = (((FONT&0xF) >= 9) ? 0 : 0x40) | (FULL_HEIGHT-1); —ложение с константой 0
0709   0462 36 64         mvi m, 100
0710   0464               ; 4 VG75[0] = FONT; —ложение с константой 0
0711   0464 36 77         mvi m, 119
0712   0466               ; 5 VG75[0] = ((HIDDEN_ATTRIB) ? 0 : 0x40) | ((FONT&0xF)==9 ? 0x80 : 0) | 0x13; —ложение с константой 0
0713   0466 36 53         mvi m, 83
0714   0468               ; 6 VG75[1] = 0x23; —ложение с константой 1
0715   0468 23            inx h
0716   0469 36 23         mvi m, 35
0717   046B               ; 7 while((VG75[1] & 0x20) == 0); 
0718   046B             l51:
0719   046B               ; —ложение с константой 1
0720   046B 2A 4A 08      lhld VG75
0721   046E 23            inx h
0722   046F 7E            mov a, m
0723   0470 E6 20         ani 32
0724   0472 C2 78 04      jnz l52
0725   0475 C3 6B 04      jmp l51
0726   0478             l52:
0727   0478               ; 8 while((VG75[1] & 0x20) == 0); 
0728   0478             l53:
0729   0478               ; —ложение с константой 1
0730   0478 2A 4A 08      lhld VG75
0731   047B 23            inx h
0732   047C 7E            mov a, m
0733   047D E6 20         ani 32
0734   047F C2 85 04      jnz l54
0735   0482 C3 78 04      jmp l53
0736   0485             l54:
0737   0485               ; 9 VT57[8] = 0x80; —ложение
0738   0485 2A 4D 08      lhld VT57
0739   0488 11 08 00      lxi d, 8
0740   048B 19            dad d
0741   048C 36 80         mvi m, 128
0742   048E               ; 10 VT57[4] = (uchar)(MEM_ADDR); —ложение с константой 4
0743   048E 2A 4D 08      lhld VT57
0744   0491 23            inx h
0745   0492 23            inx h
0746   0493 23            inx h
0747   0494 23            inx h
0748   0495 36 D0         mvi m, 208
0749   0497               ; 11 VT57[4] = (uchar)((MEM_ADDR)>>8); —ложение с константой 4
0750   0497 2A 4D 08      lhld VT57
0751   049A 23            inx h
0752   049B 23            inx h
0753   049C 23            inx h
0754   049D 23            inx h
0755   049E 36 76         mvi m, 118
0756   04A0               ; 12 VT57[5] = (uchar)((MEM_SIZE)-1); —ложение
0757   04A0 2A 4D 08      lhld VT57
0758   04A3 11 05 00      lxi d, 5
0759   04A6 19            dad d
0760   04A7 36 1C         mvi m, 28
0761   04A9               ; 13 VT57[5] = 0x40 | (uchar)(((MEM_SIZE)-1)>>8); —ложение
0762   04A9 2A 4D 08      lhld VT57
0763   04AC 11 05 00      lxi d, 5
0764   04AF 19            dad d
0765   04B0 36 49         mvi m, 73
0766   04B2               ; 14 VT57[8] = 0xA4; —ложение
0767   04B2 2A 4D 08      lhld VT57
0768   04B5 11 08 00      lxi d, 8
0769   04B8 19            dad d
0770   04B9 36 A4         mvi m, 164
0771   04BB               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
0772   04BB F3           di 
0773   04BC               ; 426 ScreenStartPointer = (void*)0x76DA;
0774   04BC 21 DA 76      lxi h, 30426
0775   04BF 22 54 08      shld ScreenStartPointer
0776   04C2 C1            pop b
0777   04C3 C9            ret
0778   04C4               ; --- apogey_stdmode -----------------------------------------------------------------
0779   04C4             apogey_stdmode:
0780   04C4 C5            push b
0781   04C5               ; 3 memset((uchar*)(MEM_ADDR), 0, (FULL_HEIGHT)*(BPL)); 
0782   04C5 21 D0 E1      lxi h, 57808
0783   04C8 22 7E 08      shld memset_1
0784   04CB AF            xra a
0785   04CC 32 80 08      sta memset_2
0786   04CF 21 24 09      lxi h, 2340
0787   04D2 CD 21 08      call memset
0788   04D5               ; 4 if(FILL_EOL) { 5 v = (uchar*)(MEM_ADDR)-1; 9 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*(BPL) + ((HIDDEN_ATTRIB) ? 9 : 8); 
0789   04D5 21 C2 E2      lxi h, 58050
0790   04D8 22 50 08      shld apogeyVideoMem
0791   04DB               ; 10 apogeyVideoBpl = (BPL); 
0792   04DB 3E 4E         mvi a, 78
0793   04DD 32 53 08      sta apogeyVideoBpl
0794   04E0               ; 1 VG75[1] = 0; —ложение с константой 1
0795   04E0 2A 4A 08      lhld VG75
0796   04E3 23            inx h
0797   04E4 36 00         mvi m, 0
0798   04E6               ; 2 VG75[0] = 78-1; —ложение с константой 0
0799   04E6 2A 4A 08      lhld VG75
0800   04E9 36 4D         mvi m, 77
0801   04EB               ; 3 VG75[0] = (((FONT&0xF) >= 9) ? 0 : 0x40) | (FULL_HEIGHT-1); —ложение с константой 0
0802   04EB 36 1D         mvi m, 29
0803   04ED               ; 4 VG75[0] = FONT; —ложение с константой 0
0804   04ED 36 99         mvi m, 153
0805   04EF               ; 5 VG75[0] = ((HIDDEN_ATTRIB) ? 0 : 0x40) | ((FONT&0xF)==9 ? 0x80 : 0) | 0x13; —ложение с константой 0
0806   04EF 36 D3         mvi m, 211
0807   04F1               ; 6 VG75[1] = 0x23; —ложение с константой 1
0808   04F1 23            inx h
0809   04F2 36 23         mvi m, 35
0810   04F4               ; 7 while((VG75[1] & 0x20) == 0); 
0811   04F4             l69:
0812   04F4               ; —ложение с константой 1
0813   04F4 2A 4A 08      lhld VG75
0814   04F7 23            inx h
0815   04F8 7E            mov a, m
0816   04F9 E6 20         ani 32
0817   04FB C2 01 05      jnz l70
0818   04FE C3 F4 04      jmp l69
0819   0501             l70:
0820   0501               ; 8 while((VG75[1] & 0x20) == 0); 
0821   0501             l71:
0822   0501               ; —ложение с константой 1
0823   0501 2A 4A 08      lhld VG75
0824   0504 23            inx h
0825   0505 7E            mov a, m
0826   0506 E6 20         ani 32
0827   0508 C2 0E 05      jnz l72
0828   050B C3 01 05      jmp l71
0829   050E             l72:
0830   050E               ; 9 VT57[8] = 0x80; —ложение
0831   050E 2A 4D 08      lhld VT57
0832   0511 11 08 00      lxi d, 8
0833   0514 19            dad d
0834   0515 36 80         mvi m, 128
0835   0517               ; 10 VT57[4] = (uchar)(MEM_ADDR); —ложение с константой 4
0836   0517 2A 4D 08      lhld VT57
0837   051A 23            inx h
0838   051B 23            inx h
0839   051C 23            inx h
0840   051D 23            inx h
0841   051E 36 D0         mvi m, 208
0842   0520               ; 11 VT57[4] = (uchar)((MEM_ADDR)>>8); —ложение с константой 4
0843   0520 2A 4D 08      lhld VT57
0844   0523 23            inx h
0845   0524 23            inx h
0846   0525 23            inx h
0847   0526 23            inx h
0848   0527 36 E1         mvi m, 225
0849   0529               ; 12 VT57[5] = (uchar)((MEM_SIZE)-1); —ложение
0850   0529 2A 4D 08      lhld VT57
0851   052C 11 05 00      lxi d, 5
0852   052F 19            dad d
0853   0530 36 23         mvi m, 35
0854   0532               ; 13 VT57[5] = 0x40 | (uchar)(((MEM_SIZE)-1)>>8); —ложение
0855   0532 2A 4D 08      lhld VT57
0856   0535 11 05 00      lxi d, 5
0857   0538 19            dad d
0858   0539 36 49         mvi m, 73
0859   053B               ; 14 VT57[8] = 0xA4; —ложение
0860   053B 2A 4D 08      lhld VT57
0861   053E 11 08 00      lxi d, 8
0862   0541 19            dad d
0863   0542 36 A4         mvi m, 164
0864   0544               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
0865   0544 F3           di 
0866   0545               ; 431 ScreenStartPointer = (void*)0xE1DA;
0867   0545 21 DA E1      lxi h, 57818
0868   0548 22 54 08      shld ScreenStartPointer
0869   054B C1            pop b
0870   054C C9            ret
0871   054D               ; --- rk_stdmode -----------------------------------------------------------------
0872   054D             rk_stdmode:
0873   054D C5            push b
0874   054E               ; 3 memset((uchar*)(MEM_ADDR), 0, (FULL_HEIGHT)*(BPL)); 
0875   054E 21 D0 76      lxi h, 30416
0876   0551 22 7E 08      shld memset_1
0877   0554 AF            xra a
0878   0555 32 80 08      sta memset_2
0879   0558 21 24 09      lxi h, 2340
0880   055B CD 21 08      call memset
0881   055E               ; 4 if(FILL_EOL) { 5 v = (uchar*)(MEM_ADDR)-1; 9 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*(BPL) + ((HIDDEN_ATTRIB) ? 9 : 8); 
0882   055E 21 C2 77      lxi h, 30658
0883   0561 22 50 08      shld apogeyVideoMem
0884   0564               ; 10 apogeyVideoBpl = (BPL); 
0885   0564 3E 4E         mvi a, 78
0886   0566 32 53 08      sta apogeyVideoBpl
0887   0569               ; 1 VG75[1] = 0; —ложение с константой 1
0888   0569 2A 4A 08      lhld VG75
0889   056C 23            inx h
0890   056D 36 00         mvi m, 0
0891   056F               ; 2 VG75[0] = 78-1; —ложение с константой 0
0892   056F 2A 4A 08      lhld VG75
0893   0572 36 4D         mvi m, 77
0894   0574               ; 3 VG75[0] = (((FONT&0xF) >= 9) ? 0 : 0x40) | (FULL_HEIGHT-1); —ложение с константой 0
0895   0574 36 1D         mvi m, 29
0896   0576               ; 4 VG75[0] = FONT; —ложение с константой 0
0897   0576 36 99         mvi m, 153
0898   0578               ; 5 VG75[0] = ((HIDDEN_ATTRIB) ? 0 : 0x40) | ((FONT&0xF)==9 ? 0x80 : 0) | 0x13; —ложение с константой 0
0899   0578 36 D3         mvi m, 211
0900   057A               ; 6 VG75[1] = 0x23; —ложение с константой 1
0901   057A 23            inx h
0902   057B 36 23         mvi m, 35
0903   057D               ; 7 while((VG75[1] & 0x20) == 0); 
0904   057D             l87:
0905   057D               ; —ложение с константой 1
0906   057D 2A 4A 08      lhld VG75
0907   0580 23            inx h
0908   0581 7E            mov a, m
0909   0582 E6 20         ani 32
0910   0584 C2 8A 05      jnz l88
0911   0587 C3 7D 05      jmp l87
0912   058A             l88:
0913   058A               ; 8 while((VG75[1] & 0x20) == 0); 
0914   058A             l89:
0915   058A               ; —ложение с константой 1
0916   058A 2A 4A 08      lhld VG75
0917   058D 23            inx h
0918   058E 7E            mov a, m
0919   058F E6 20         ani 32
0920   0591 C2 97 05      jnz l90
0921   0594 C3 8A 05      jmp l89
0922   0597             l90:
0923   0597               ; 9 VT57[8] = 0x80; —ложение
0924   0597 2A 4D 08      lhld VT57
0925   059A 11 08 00      lxi d, 8
0926   059D 19            dad d
0927   059E 36 80         mvi m, 128
0928   05A0               ; 10 VT57[4] = (uchar)(MEM_ADDR); —ложение с константой 4
0929   05A0 2A 4D 08      lhld VT57
0930   05A3 23            inx h
0931   05A4 23            inx h
0932   05A5 23            inx h
0933   05A6 23            inx h
0934   05A7 36 D0         mvi m, 208
0935   05A9               ; 11 VT57[4] = (uchar)((MEM_ADDR)>>8); —ложение с константой 4
0936   05A9 2A 4D 08      lhld VT57
0937   05AC 23            inx h
0938   05AD 23            inx h
0939   05AE 23            inx h
0940   05AF 23            inx h
0941   05B0 36 76         mvi m, 118
0942   05B2               ; 12 VT57[5] = (uchar)((MEM_SIZE)-1); —ложение
0943   05B2 2A 4D 08      lhld VT57
0944   05B5 11 05 00      lxi d, 5
0945   05B8 19            dad d
0946   05B9 36 23         mvi m, 35
0947   05BB               ; 13 VT57[5] = 0x40 | (uchar)(((MEM_SIZE)-1)>>8); —ложение
0948   05BB 2A 4D 08      lhld VT57
0949   05BE 11 05 00      lxi d, 5
0950   05C1 19            dad d
0951   05C2 36 49         mvi m, 73
0952   05C4               ; 14 VT57[8] = 0xA4; —ложение
0953   05C4 2A 4D 08      lhld VT57
0954   05C7 11 08 00      lxi d, 8
0955   05CA 19            dad d
0956   05CB 36 A4         mvi m, 164
0957   05CD               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
0958   05CD F3           di 
0959   05CE               ; 436 ScreenStartPointer = (void*)0x76DA;
0960   05CE 21 DA 76      lxi h, 30426
0961   05D1 22 54 08      shld ScreenStartPointer
0962   05D4 C1            pop b
0963   05D5 C9            ret
0964   05D6               ; --- unpack_btree1 -----------------------------------------------------------------
0965   05D6             unpack_btree1:
0966   05D6 23          	INX H
0967   05D7 23          	INX H
0968   05D8 23          	INX H
0969   05D9 23          	INX H
0970   05DA             	;LXI D, 0C113h ;ScreenStart
0971   05DA             	;LXI D, 0E1DAh ;ScreenStart
0972   05DA 7E          	MOV A,M ;load 1st byte into A
0973   05DB 23          	INX H ;move to next byte
0974   05DC 47          	MOV B,A ;save A
0975   05DD E6 01       	ANI 001h
0976   05DF CA E8 05    	JZ unpack_level1_1
0977   05E2 CD 6D 06    	CALL unpack_level2
0978   05E5 C3 EF 05    	JMP unpack_level1_1_end
0979   05E8             unpack_level1_1:
0980   05E8 E5          	PUSH H
0981   05E9 21 58 02    	LXI H,0258h
0982   05EC 19          	DAD D
0983   05ED EB          	XCHG
0984   05EE E1          	POP H
0985   05EF             unpack_level1_1_end:
0986   05EF 78          	MOV A,B ;restore A
0987   05F0 E6 02       	ANI 002h
0988   05F2 CA FB 05    	JZ unpack_level1_2
0989   05F5 CD 6D 06    	CALL unpack_level2
0990   05F8 C3 02 06    	JMP unpack_level1_2_end
0991   05FB             unpack_level1_2:
0992   05FB E5          	PUSH H
0993   05FC 21 58 02    	LXI H,0258h
0994   05FF 19          	DAD D
0995   0600 EB          	XCHG
0996   0601 E1          	POP H
0997   0602             unpack_level1_2_end:
0998   0602 78          	MOV A,B ;restore A
0999   0603 E6 04       	ANI 004h
1000   0605 CA 0E 06    	JZ unpack_level1_3
1001   0608 CD 6D 06    	CALL unpack_level2
1002   060B C3 15 06    	JMP unpack_level1_3_end
1003   060E             unpack_level1_3:
1004   060E E5          	PUSH H
1005   060F 21 58 02    	LXI H,0258h
1006   0612 19          	DAD D
1007   0613 EB          	XCHG
1008   0614 E1          	POP H
1009   0615             unpack_level1_3_end:
1010   0615 78          	MOV A,B ;restore A
1011   0616 E6 08       	ANI 008h
1012   0618 CA 21 06    	JZ unpack_level1_4
1013   061B CD 6D 06    	CALL unpack_level2
1014   061E C3 28 06    	JMP unpack_level1_4_end
1015   0621             unpack_level1_4:
1016   0621 E5          	PUSH H
1017   0622 21 58 02    	LXI H,0258h
1018   0625 19          	DAD D
1019   0626 EB          	XCHG
1020   0627 E1          	POP H
1021   0628             unpack_level1_4_end:
1022   0628 78          	MOV A,B ;restore A
1023   0629 E6 10       	ANI 010h
1024   062B CA 34 06    	JZ unpack_level1_5
1025   062E CD 6D 06    	CALL unpack_level2
1026   0631 C3 3B 06    	JMP unpack_level1_5_end
1027   0634             unpack_level1_5:
1028   0634 E5          	PUSH H
1029   0635 21 58 02    	LXI H,0258h
1030   0638 19          	DAD D
1031   0639 EB          	XCHG
1032   063A E1          	POP H
1033   063B             unpack_level1_5_end:
1034   063B 78          	MOV A,B ;restore A
1035   063C E6 20       	ANI 020h
1036   063E CA 47 06    	JZ unpack_level1_6
1037   0641 CD 6D 06    	CALL unpack_level2
1038   0644 C3 4E 06    	JMP unpack_level1_6_end
1039   0647             unpack_level1_6:
1040   0647 E5          	PUSH H
1041   0648 21 58 02    	LXI H,0258h
1042   064B 19          	DAD D
1043   064C EB          	XCHG
1044   064D E1          	POP H
1045   064E             unpack_level1_6_end:
1046   064E 78          	MOV A,B ;restore A
1047   064F E6 40       	ANI 040h
1048   0651 CA 5A 06    	JZ unpack_level1_7
1049   0654 CD 6D 06    	CALL unpack_level2
1050   0657 C3 61 06    	JMP unpack_level1_7_end
1051   065A             unpack_level1_7:
1052   065A E5          	PUSH H
1053   065B 21 58 02    	LXI H,0258h
1054   065E 19          	DAD D
1055   065F EB          	XCHG
1056   0660 E1          	POP H
1057   0661             unpack_level1_7_end:
1058   0661 78          	MOV A,B ;restore A
1059   0662 E6 80       	ANI 080h
1060   0664 CA 6A 06    	JZ unpack_level1_8
1061   0667 CD 6D 06    	CALL unpack_level2
1062   066A             unpack_level1_8:
1063   066A C3 03 08    	JMP unpack_end
1064   066D             	
1065   066D             unpack_level2:
1066   066D C5          	PUSH B
1067   066E 7E          	MOV A,M ;load byte into A
1068   066F 23          	INX H ;move to next byte
1069   0670 47          	MOV B,A ;save A
1070   0671 E6 01       	ANI 001h
1071   0673 CA 7C 06    	JZ unpack_level2_1
1072   0676 CD 0A 07    	CALL unpack_level3
1073   0679 C3 83 06    	JMP unpack_level2_1_end
1074   067C             unpack_level2_1:
1075   067C E5          	PUSH H
1076   067D 21 4B 00    	LXI H,04Bh
1077   0680 19          	DAD D
1078   0681 EB          	XCHG
1079   0682 E1          	POP H
1080   0683             unpack_level2_1_end:
1081   0683 78          	MOV A,B ;restore A
1082   0684 E6 02       	ANI 002h
1083   0686 CA 8F 06    	JZ unpack_level2_2
1084   0689 CD 0A 07    	CALL unpack_level3
1085   068C C3 96 06    	JMP unpack_level2_2_end
1086   068F             unpack_level2_2:
1087   068F E5          	PUSH H
1088   0690 21 4B 00    	LXI H,04Bh
1089   0693 19          	DAD D
1090   0694 EB          	XCHG
1091   0695 E1          	POP H
1092   0696             unpack_level2_2_end:
1093   0696 78          	MOV A,B ;restore A
1094   0697 E6 04       	ANI 004h
1095   0699 CA A2 06    	JZ unpack_level2_3
1096   069C CD 0A 07    	CALL unpack_level3
1097   069F C3 A9 06    	JMP unpack_level2_3_end
1098   06A2             unpack_level2_3:
1099   06A2 E5          	PUSH H
1100   06A3 21 4B 00    	LXI H,04Bh
1101   06A6 19          	DAD D
1102   06A7 EB          	XCHG
1103   06A8 E1          	POP H
1104   06A9             unpack_level2_3_end:
1105   06A9 78          	MOV A,B ;restore A
1106   06AA E6 08       	ANI 008h
1107   06AC CA B5 06    	JZ unpack_level2_4
1108   06AF CD 0A 07    	CALL unpack_level3
1109   06B2 C3 BC 06    	JMP unpack_level2_4_end
1110   06B5             unpack_level2_4:
1111   06B5 E5          	PUSH H
1112   06B6 21 4B 00    	LXI H,04Bh
1113   06B9 19          	DAD D
1114   06BA EB          	XCHG
1115   06BB E1          	POP H
1116   06BC             unpack_level2_4_end:
1117   06BC 78          	MOV A,B ;restore A
1118   06BD E6 10       	ANI 010h
1119   06BF CA C8 06    	JZ unpack_level2_5
1120   06C2 CD 0A 07    	CALL unpack_level3
1121   06C5 C3 CF 06    	JMP unpack_level2_5_end
1122   06C8             unpack_level2_5:
1123   06C8 E5          	PUSH H
1124   06C9 21 4B 00    	LXI H,04Bh
1125   06CC 19          	DAD D
1126   06CD EB          	XCHG
1127   06CE E1          	POP H
1128   06CF             unpack_level2_5_end:
1129   06CF 78          	MOV A,B ;restore A
1130   06D0 E6 20       	ANI 020h
1131   06D2 CA DB 06    	JZ unpack_level2_6
1132   06D5 CD 0A 07    	CALL unpack_level3
1133   06D8 C3 E2 06    	JMP unpack_level2_6_end
1134   06DB             unpack_level2_6:
1135   06DB E5          	PUSH H
1136   06DC 21 4B 00    	LXI H,04Bh
1137   06DF 19          	DAD D
1138   06E0 EB          	XCHG
1139   06E1 E1          	POP H
1140   06E2             unpack_level2_6_end:
1141   06E2 78          	MOV A,B ;restore A
1142   06E3 E6 40       	ANI 040h
1143   06E5 CA EE 06    	JZ unpack_level2_7
1144   06E8 CD 0A 07    	CALL unpack_level3
1145   06EB C3 F5 06    	JMP unpack_level2_7_end
1146   06EE             unpack_level2_7:
1147   06EE E5          	PUSH H
1148   06EF 21 4B 00    	LXI H,04Bh
1149   06F2 19          	DAD D
1150   06F3 EB          	XCHG
1151   06F4 E1          	POP H
1152   06F5             unpack_level2_7_end:
1153   06F5 78          	MOV A,B ;restore A
1154   06F6 E6 80       	ANI 080h
1155   06F8 CA 01 07    	JZ unpack_level2_8
1156   06FB CD 0A 07    	CALL unpack_level3
1157   06FE C3 08 07    	JMP unpack_level2_8_end
1158   0701             unpack_level2_8:
1159   0701 E5          	PUSH H
1160   0702 21 4B 00    	LXI H,04Bh
1161   0705 19          	DAD D
1162   0706 EB          	XCHG
1163   0707 E1          	POP H
1164   0708             unpack_level2_8_end:
1165   0708 C1          	POP B
1166   0709 C9          	RET
1167   070A             
1168   070A             unpack_level3:
1169   070A C5          	PUSH B
1170   070B 7E          	MOV A,M ;load byte into A
1171   070C 23          	INX H ;move to next byte
1172   070D 47          	MOV B,A ;save A
1173   070E E6 01       	ANI 001h
1174   0710 CA 19 07    	JZ unpack_level3_1
1175   0713 CD AE 07    	CALL unpack_level4
1176   0716 C3 20 07    	JMP unpack_level3_1_end
1177   0719             unpack_level3_1:
1178   0719 E5          	PUSH H
1179   071A 21 08 00    	LXI H,008h
1180   071D 19          	DAD D
1181   071E EB          	XCHG
1182   071F E1          	POP H
1183   0720             unpack_level3_1_end:
1184   0720 78          	MOV A,B ;restore A
1185   0721 E6 02       	ANI 002h
1186   0723 CA 2C 07    	JZ unpack_level3_2
1187   0726 CD AE 07    	CALL unpack_level4
1188   0729 C3 33 07    	JMP unpack_level3_2_end
1189   072C             unpack_level3_2:
1190   072C E5          	PUSH H
1191   072D 21 08 00    	LXI H,008h
1192   0730 19          	DAD D
1193   0731 EB          	XCHG
1194   0732 E1          	POP H
1195   0733             unpack_level3_2_end:
1196   0733 78          	MOV A,B ;restore A
1197   0734 E6 04       	ANI 004h
1198   0736 CA 3F 07    	JZ unpack_level3_3
1199   0739 CD AE 07    	CALL unpack_level4
1200   073C C3 46 07    	JMP unpack_level3_3_end
1201   073F             unpack_level3_3:
1202   073F E5          	PUSH H
1203   0740 21 08 00    	LXI H,008h
1204   0743 19          	DAD D
1205   0744 EB          	XCHG
1206   0745 E1          	POP H
1207   0746             unpack_level3_3_end:
1208   0746 78          	MOV A,B ;restore A
1209   0747 E6 08       	ANI 008h
1210   0749 CA 52 07    	JZ unpack_level3_4
1211   074C CD AE 07    	CALL unpack_level4
1212   074F C3 59 07    	JMP unpack_level3_4_end
1213   0752             unpack_level3_4:
1214   0752 E5          	PUSH H
1215   0753 21 08 00    	LXI H,008h
1216   0756 19          	DAD D
1217   0757 EB          	XCHG
1218   0758 E1          	POP H
1219   0759             unpack_level3_4_end:
1220   0759 78          	MOV A,B ;restore A
1221   075A E6 10       	ANI 010h
1222   075C CA 65 07    	JZ unpack_level3_5
1223   075F CD AE 07    	CALL unpack_level4
1224   0762 C3 6C 07    	JMP unpack_level3_5_end
1225   0765             unpack_level3_5:
1226   0765 E5          	PUSH H
1227   0766 21 08 00    	LXI H,008h
1228   0769 19          	DAD D
1229   076A EB          	XCHG
1230   076B E1          	POP H
1231   076C             unpack_level3_5_end:
1232   076C 78          	MOV A,B ;restore A
1233   076D E6 20       	ANI 020h
1234   076F CA 78 07    	JZ unpack_level3_6
1235   0772 CD AE 07    	CALL unpack_level4
1236   0775 C3 7F 07    	JMP unpack_level3_6_end
1237   0778             unpack_level3_6:
1238   0778 E5          	PUSH H
1239   0779 21 08 00    	LXI H,008h
1240   077C 19          	DAD D
1241   077D EB          	XCHG
1242   077E E1          	POP H
1243   077F             unpack_level3_6_end:
1244   077F 78          	MOV A,B ;restore A
1245   0780 E6 40       	ANI 040h
1246   0782 CA 8B 07    	JZ unpack_level3_7
1247   0785 CD AE 07    	CALL unpack_level4
1248   0788 C3 92 07    	JMP unpack_level3_7_end
1249   078B             unpack_level3_7:
1250   078B E5          	PUSH H
1251   078C 21 08 00    	LXI H,008h
1252   078F 19          	DAD D
1253   0790 EB          	XCHG
1254   0791 E1          	POP H
1255   0792             unpack_level3_7_end:
1256   0792 78          	MOV A,B ;restore A
1257   0793 E6 80       	ANI 080h
1258   0795 CA 9E 07    	JZ unpack_level3_8
1259   0798 CD AE 07    	CALL unpack_level4
1260   079B C3 A5 07    	JMP unpack_level3_8_end
1261   079E             unpack_level3_8:
1262   079E E5          	PUSH H
1263   079F 21 08 00    	LXI H,008h
1264   07A2 19          	DAD D
1265   07A3 EB          	XCHG
1266   07A4 E1          	POP H
1267   07A5             unpack_level3_8_end:
1268   07A5             	;end of line: add 11 bytes
1269   07A5 E5          	PUSH H
1270   07A6 21 0B 00    	LXI H,00Bh
1271   07A9 19          	DAD D
1272   07AA EB          	XCHG
1273   07AB E1          	POP H
1274   07AC             	;going back
1275   07AC C1          	POP B
1276   07AD C9          	RET
1277   07AE             
1278   07AE             unpack_level4:
1279   07AE C5          	PUSH B
1280   07AF 7E          	MOV A,M ;load byte into A
1281   07B0 23          	INX H ;move to next byte
1282   07B1 47          	MOV B,A ;save A
1283   07B2 E6 01       	ANI 001h
1284   07B4 CA BA 07    	JZ unpack_level4_1
1285   07B7 7E          	MOV A,M ;load byte into A
1286   07B8 23          	INX H ;move to next byte
1287   07B9 12          	STAX D
1288   07BA             unpack_level4_1:
1289   07BA 13          	INX D
1290   07BB 78          	MOV A,B ;restore A
1291   07BC E6 02       	ANI 002h
1292   07BE CA C4 07    	JZ unpack_level4_2
1293   07C1 7E          	MOV A,M ;load byte into A
1294   07C2 23          	INX H ;move to next byte
1295   07C3 12          	STAX D
1296   07C4             unpack_level4_2:
1297   07C4 13          	INX D
1298   07C5 78          	MOV A,B ;restore A
1299   07C6 E6 04       	ANI 004h
1300   07C8 CA CE 07    	JZ unpack_level4_3
1301   07CB 7E          	MOV A,M ;load byte into A
1302   07CC 23          	INX H ;move to next byte
1303   07CD 12          	STAX D
1304   07CE             unpack_level4_3:
1305   07CE 13          	INX D
1306   07CF 78          	MOV A,B ;restore A
1307   07D0 E6 08       	ANI 008h
1308   07D2 CA D8 07    	JZ unpack_level4_4
1309   07D5 7E          	MOV A,M ;load byte into A
1310   07D6 23          	INX H ;move to next byte
1311   07D7 12          	STAX D
1312   07D8             unpack_level4_4:
1313   07D8 13          	INX D
1314   07D9 78          	MOV A,B ;restore A
1315   07DA E6 10       	ANI 010h
1316   07DC CA E2 07    	JZ unpack_level4_5
1317   07DF 7E          	MOV A,M ;load byte into A
1318   07E0 23          	INX H ;move to next byte
1319   07E1 12          	STAX D
1320   07E2             unpack_level4_5:
1321   07E2 13          	INX D
1322   07E3 78          	MOV A,B ;restore A
1323   07E4 E6 20       	ANI 020h
1324   07E6 CA EC 07    	JZ unpack_level4_6
1325   07E9 7E          	MOV A,M ;load byte into A
1326   07EA 23          	INX H ;move to next byte
1327   07EB 12          	STAX D
1328   07EC             unpack_level4_6:
1329   07EC 13          	INX D
1330   07ED 78          	MOV A,B ;restore A
1331   07EE E6 40       	ANI 040h
1332   07F0 CA F6 07    	JZ unpack_level4_7
1333   07F3 7E          	MOV A,M ;load byte into A
1334   07F4 23          	INX H ;move to next byte
1335   07F5 12          	STAX D
1336   07F6             unpack_level4_7:
1337   07F6 13          	INX D
1338   07F7 78          	MOV A,B ;restore A
1339   07F8 E6 80       	ANI 080h
1340   07FA CA 00 08    	JZ unpack_level4_8
1341   07FD 7E          	MOV A,M ;load byte into A
1342   07FE 23          	INX H ;move to next byte
1343   07FF 12          	STAX D
1344   0800             unpack_level4_8:
1345   0800 13          	INX D
1346   0801 C1          	POP B
1347   0802 C9          	RET
1348   0803             	
1349   0803             unpack_end:
1350   0803 00          	NOP
1351   0804               
1352   0804 C9            ret
1353   0805               ; --- fs_init -----------------------------------------------------------------
1354   0805             fs_init:
1355   0805 22 71 08        SHLD fs_cmdLine
1356   0808 EB              XCHG
1357   0809 22 74 08        SHLD fs_selfName
1358   080C 60              MOV H, B
1359   080D 69              MOV L, C
1360   080E 22 13 08        SHLD fs_entry_n+1
1361   0811               
1362   0811 C9            ret
1363   0812               ; --- fs_entry -----------------------------------------------------------------
1364   0812             fs_entry:
1365   0812             fs_entry_n:
1366   0812 C3 00 00        JMP 0000h
1367   0815               
1368   0815 C9            ret
1369   0816               ; --- fs_open -----------------------------------------------------------------
1370   0816             fs_open:
1371   0816 22 7C 08      shld fs_open_1
1372   0819               ; 5 return fs_open0(name, O_OPEN);
1373   0819 22 83 08      shld fs_open0_1
1374   081C AF            xra a
1375   081D C3 3B 08      jmp fs_open0
1376   0820 C9            ret
1377   0821               ; --- memset -----------------------------------------------------------------
1378   0821             memset:
1379   0821 22 81 08      shld memset_3
1380   0824               ; 2 asm {
1381   0824 C5              push b
1382   0825 3A 80 08        lda memset_2
1383   0828 EB              xchg
1384   0829 2A 7E 08        lhld memset_1
1385   082C EB              xchg
1386   082D 01 FF FF        lxi b, -1    
1387   0830             memset_l1:
1388   0830 09              dad b
1389   0831 D2 39 08        jnc memset_l2
1390   0834 12              stax d
1391   0835 13              inx d
1392   0836 C3 30 08        jmp memset_l1
1393   0839             memset_l2:
1394   0839 C1              pop b
1395   083A               
1396   083A C9            ret
1397   083B               ; --- fs_open0 -----------------------------------------------------------------
1398   083B             fs_open0:
1399   083B 32 85 08      sta fs_open0_2
1400   083E               ; 5 asm {      
1401   083E                   
1402   083E C5              PUSH B
1403   083F                 ; a = fs_open0_2
1404   083F 57              MOV  D, A 
1405   0840 2A 83 08        LHLD fs_open0_1
1406   0843 3E 02           MVI  A, 2
1407   0845 CD 12 08        CALL fs_entry
1408   0848 C1              POP  B
1409   0849               
1410   0849 C9            ret
1411   084A             VG75:
1412   084A 4C 08        .dw $+2
1413   084C              .ds 1
1414   084D             VT57:
1415   084D 4F 08        .dw $+2
1416   084F              .ds 1
1417   0850             apogeyVideoMem:
1418   0850 52 08        .dw $+2
1419   0852              .ds 1
1420   0853             apogeyVideoBpl:
1421   0853              .ds 1
1422   0854             ScreenStartPointer:
1423   0854 56 08        .dw $+2
1424   0856             main_i:
1425   0856              .ds 2
1426   0858             main_j:
1427   0858              .ds 2
1428   085A             main_c:
1429   085A              .ds 1
1430   085B             main_FifoReadPointer:
1431   085B              .ds 2
1432   085D             main_FifoWritePointer:
1433   085D              .ds 2
1434   085F             main_iNumberOfFrames:
1435   085F              .ds 2
1436   0861             main_iFrameCounter:
1437   0861              .ds 2
1438   0863             main_Machine_Type:
1439   0863              .ds 1
1440   0864             main_Screen_Type:
1441   0864              .ds 1
1442   0865             main_Fifo_Write_Threshold_1:
1443   0865              .ds 1
1444   0866             main_Fifo_Write_Threshold_2:
1445   0866              .ds 1
1446   0867             main_Fifo_Write_Threshold_3:
1447   0867              .ds 1
1448   0868             main_Fifo_Write_Threshold_4:
1449   0868              .ds 1
1450   0869             main_Fifo_Read_Threshold_1:
1451   0869              .ds 1
1452   086A             main_Fifo_Read_Threshold_2:
1453   086A              .ds 1
1454   086B             main_Fifo_Read_Threshold_3:
1455   086B              .ds 1
1456   086C             apogey_hires_i:
1457   086C              .ds 1
1458   086D             apogey_lores_i:
1459   086D              .ds 1
1460   086E             radio_lores_i:
1461   086E              .ds 1
1462   086F             apogey_stdmode_i:
1463   086F              .ds 1
1464   0870             rk_stdmode_i:
1465   0870              .ds 1
1466   0871             fs_cmdLine:
1467   0871 73 08        .dw $+2
1468   0873              .ds 1
1469   0874             fs_selfName:
1470   0874 76 08        .dw $+2
1471   0876              .ds 1
1472   0877             fs_low:
1473   0877              .ds 2
1474   0879             fs_high:
1475   0879              .ds 2
1476   087B             fs_addr:
1477   087B              .ds 1
1478   087C             fs_open_1:
1479   087C              .ds 2
1480   087E             memset_1:
1481   087E              .ds 2
1482   0880             memset_2:
1483   0880              .ds 1
1484   0881             memset_3:
1485   0881              .ds 2
1486   0883             fs_open0_1:
1487   0883              .ds 2
1488   0885             fs_open0_2:
1489   0885              .ds 1
1490   0886             string0:
1491   0886 56 49 44 45  .db 86,73,68,69,79,47,65,80,80,76,69,46,65,80,86,0
1491   088A 4F 2F 41 50 
1491   088E 50 4C 45 2E 
1491   0892 41 50 56 00 
1492   0896               .end
tasm: Number of errors = 0
