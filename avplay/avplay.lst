0001   0000               .include "stdlib8080.inc"
0001+  0000               .org 0h
0002+  0000             entry:
0003+  0000 C3 03 00      jmp main
0004+  0003             
0002   0003             main:
0003   0003 21 57 FF    	  LXI  H, 0FF57h
0004   0006 7E          	  MOV A,M
0005   0007 FE 90       	  CPI 090h
0006   0009 C2 4A 00    	  JNZ Machine_Test_Not_Apogey
0007   000C 23          	  INX  H
0008   000D 7E          	  MOV A,M
0009   000E FE 61       	  CPI 061h
0010   0010 C2 4A 00    	  JNZ Machine_Test_Not_Apogey
0011   0013 23          	  INX  H
0012   0014 7E          	  MOV A,M
0013   0015 FE 70       	  CPI 070h
0014   0017 C2 4A 00    	  JNZ Machine_Test_Not_Apogey
0015   001A 23          	  INX  H
0016   001B 7E          	  MOV A,M
0017   001C FE 6F       	  CPI 06Fh
0018   001E C2 4A 00    	  JNZ Machine_Test_Not_Apogey
0019   0021 3E 00       	  MVI A,00
0020   0023 32 FC 05    	  STA main_Machine_Type
0021   0026             	  ;apogey-specific init
0022   0026 3E 01             MVI  A, 1		; Версия контроллера
0023   0028 01 17 DE          LXI  B, 0DE17h; BiosEntry  ; Точка входа SD BIOS
0024   002B 11 F3 DB          LXI  D, 0DBF3h; SELF_NAME  ; Собственное имя
0025   002E 21 F3 DC          LXI  H, 0DCF3h; CMD_LINE   ; Командная строка	 
0026   0031               
0027   0031               ; 46 fs_init();
0028   0031 CD 22 04      call fs_init
0029   0034               ; 47 asm {
0030   0034             	  ;FIFO from 4000 to BFFF - 32 KB total, ~8 full frames / ~80 packed frames
0031   0034 21 00 40    	  LXI H, 04000h
0032   0037 22 F2 05    	  SHLD main_FifoReadPointer
0033   003A 22 F4 05    	  SHLD main_FifoWritePointer
0034   003D 3E 7C       	  MVI A, 07Ch
0035   003F 32 FE 05    	  STA main_Fifo_Write_Threshold_1
0036   0042 3E 45       	  MVI A, 045h
0037   0044 32 FF 05    	  STA main_Fifo_Write_Threshold_2
0038   0047               	  ;apogey-specific init done
0039   0047 C3 90 00    	  JMP Machine_Test_Done
0040   004A             Machine_Test_Not_Apogey:
0041   004A 21 5B FF    	  LXI  H, 0FF5Bh
0042   004D 7E          	  MOV A,M
0043   004E FE 72       	  CPI 072h
0044   0050 C2 87 00    	  JNZ Machine_Test_Not_Radio
0045   0053 23          	  INX  H
0046   0054 7E          	  MOV A,M
0047   0055 FE 61       	  CPI 061h
0048   0057 C2 87 00    	  JNZ Machine_Test_Not_Radio
0049   005A 23          	  INX  H
0050   005B 7E          	  MOV A,M
0051   005C FE 64       	  CPI 064h
0052   005E C2 87 00    	  JNZ Machine_Test_Not_Radio
0053   0061 23          	  INX  H
0054   0062 7E          	  MOV A,M
0055   0063 FE 69       	  CPI 069h
0056   0065 C2 87 00    	  JNZ Machine_Test_Not_Radio
0057   0068 3E 01       	  MVI A,01
0058   006A 32 FC 05    	  STA main_Machine_Type
0059   006D             	  ;radio-specific init
0060   006D 3E 01             MVI  A, 1		; Версия контроллера
0061   006F 01 17 74          LXI  B, 07417h; BiosEntry  ; Точка входа SD BIOS
0062   0072 11 F3 71          LXI  D, 071F3h; SELF_NAME  ; Собственное имя
0063   0075 21 F3 72          LXI  H, 072F3h; CMD_LINE   ; Командная строка	  
0064   0078               
0065   0078               ; 83 fs_init();
0066   0078 CD 22 04      call fs_init
0067   007B               ; 84 asm {
0068   007B             	  ;FIFO from 2000 to 5FFF - 16 KB total, ~8 full frames / ~50 packed frames
0069   007B 21 00 20    	  LXI H, 02000h
0070   007E 22 F2 05    	  SHLD main_FifoReadPointer
0071   0081 22 F4 05    	  SHLD main_FifoWritePointer
0072   0084               	  ;radio-specific init done
0073   0084 C3 90 00    	  JMP Machine_Test_Done
0074   0087             Machine_Test_Not_Radio:
0075   0087 21 E2 01    	  LXI H, str_Unknown_Machine
0076   008A CD 18 F8    	  CALL 0F818h ;using standard monitor function on unknown machines
0077   008D C3 75 F8    	  JMP 0F875h ;jump to monitor
0078   0090             Machine_Test_Done:
0079   0090               
0080   0090               ; 98 asm {
0081   0090             
0082   0090               
0083   0090               ; 1 ((uchar*)0xEF00)
0084   0090 21 01 EF      lxi h, 61185
0085   0093 36 80         mvi m, 128
0086   0095               ; 1 ((uchar*)0xEF00)
0087   0095 2D            dcr l
0088   0096 36 FF         mvi m, 255
0089   0098               ; 1 ((uchar*)0xEF00)
0090   0098 36 FF         mvi m, 255
0091   009A               ; 107 fs_open("VIDEO/APPLE.APV");
0092   009A 21 1B 06      lxi h, string0
0093   009D CD 33 04      call fs_open
0094   00A0               ; 110 asm{
0095   00A0 2A F2 05    	LHLD main_FifoReadPointer
0096   00A3 EB          	XCHG
0097   00A4 21 00 01    	LXI H, 00100h ; header 256 bytes
0098   00A7 3E 04           MVI  A, 004h;read command
0099   00A9 CD 2F 04    	CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0100   00AC 2A F2 05    	LHLD main_FifoReadPointer
0101   00AF 7C          	MOV A,H
0102   00B0 32 FD 05    	STA main_Screen_Type
0103   00B3 FE 00       	CPI 0h
0104   00B5 C2 C4 00    	JNZ SetScreen128x60
0105   00B8             SetScreen192x102:
0106   00B8 21 13 C1    	LXI H, 0C113h
0107   00BB 22 F6 05    	SHLD main_ScreenStartPointer
0108   00BE               
0109   00BE               ; 125 apogeyScreen3A();
0110   00BE CD 3E 04      call apogeyScreen3a
0111   00C1               ; 126 asm {
0112   00C1 C3 CD 00    	JMP SetScreenDone
0113   00C4             SetScreen128x60:
0114   00C4 21 DA E1    	LXI H, 0E1DAh
0115   00C7 22 F6 05    	SHLD main_ScreenStartPointer
0116   00CA               
0117   00CA               ; 132 apogeyScreen2A();
0118   00CA CD D4 04      call apogeyScreen2a
0119   00CD               ; 133 asm
0120   00CD             SetScreenDone:
0121   00CD 2A F2 05    	LHLD main_FifoReadPointer
0122   00D0 11 04 00    	LXI D,4
0123   00D3 19          	DAD D
0124   00D4 5E          	MOV E,M
0125   00D5 23          	INX H
0126   00D6 56          	MOV D,M
0127   00D7 EB          	XCHG
0128   00D8 22 F8 05    	SHLD main_iNumberOfFrames
0129   00DB               
0130   00DB               ; 147 asm {
0131   00DB 2A F4 05    	  LHLD main_FifoWritePointer
0132   00DE EB          	  XCHG
0133   00DF 21 00 30    	  LXI H, 03000h ; размер передачи 12k
0134   00E2 3E 04             MVI  A, 004h;read command
0135   00E4 CD 2F 04    	  CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0136   00E7 2A F4 05    	  LHLD main_FifoWritePointer
0137   00EA 11 00 30    	  LXI D, 03000h
0138   00ED 19          	  DAD D
0139   00EE 22 F4 05    	  SHLD main_FifoWritePointer
0140   00F1               
0141   00F1               ; 159 iFrameCounter = iNumberOfFrames;
0142   00F1 2A F8 05      lhld main_iNumberOfFrames
0143   00F4 22 FA 05      shld main_iFrameCounter
0144   00F7               ; 161 asm{
0145   00F7             Main_Loop_Start:
0146   00F7 2A FA 05    	LHLD main_iFrameCounter
0147   00FA AF          	XRA A ; A=0
0148   00FB BC          	CMP H
0149   00FC C2 06 01    	JNZ Fifo_Write_Start
0150   00FF BD          	CMP L
0151   0100 C2 06 01    	JNZ Fifo_Write_Start
0152   0103 C3 DC 01    	JMP Do_Exit
0153   0106             Fifo_Write_Start:
0154   0106             	; first check if we have enough free space in fifo, granularity is 1024 bytes
0155   0106             	; fifo is almost full when either (write!=7C00 and read-write>0 and read-write-8 < 0), or ( write=7C00 and (read> 7C00 or read < 4400) )
0156   0106 2A F4 05    	LHLD main_FifoWritePointer
0157   0109 3A FE 05    	LDA main_Fifo_Write_Threshold_1
0158   010C BC          	CMP H
0159   010D CA 24 01    	JZ Fifo_Write_Start2
0160   0110             	;not end-buffer case, check read-write>0
0161   0110 2A F2 05    	LHLD main_FifoReadPointer
0162   0113 7C          	MOV A,H
0163   0114 2A F4 05    	LHLD main_FifoWritePointer
0164   0117 BC          	CMP H
0165   0118 FA 35 01    	JM Fifo_Write_Do ;read-write < 0, not skipping
0166   011B             	;check read-write-8 < 0
0167   011B 94          	SUB H
0168   011C D6 08       	SUI 08h
0169   011E F2 35 01    	JP Fifo_Write_Do ;read-write-8 > 0, not skipping
0170   0121 C3 53 01    	JMP Fifo_Read_Start ;skipping after all
0171   0124             Fifo_Write_Start2:
0172   0124             	;end-buffer case, checking if read > 7C00 (not wrapped) 
0173   0124 2A F2 05    	LHLD main_FifoReadPointer
0174   0127 7C          	MOV A,H
0175   0128 FE 7C       	CPI 07Ch
0176   012A F2 53 01    	JP Fifo_Read_Start ;read is > 7C00, skipping write
0177   012D             	;now check if read < 4400 (wrapped) 
0178   012D FE 45       	CPI 045h
0179   012F FA 53 01    	JM Fifo_Read_Start ;read is < 4400, skipping write
0180   0132 C3 35 01    	JMP Fifo_Write_Do ;writing after all
0181   0135             Fifo_Write_Do:
0182   0135 2A F4 05    	LHLD main_FifoWritePointer
0183   0138 EB          	XCHG
0184   0139 21 00 04    	LXI H, 00400h ; размер передачи 1024 байт
0185   013C 3E 04           MVI  A, 004h;read command
0186   013E CD 2F 04    	CALL fs_entry ; HL-размер, DE-адрес / HL-сколько загрузили, A-код ошибки
0187   0141 2A F4 05    	LHLD main_FifoWritePointer
0188   0144 3E 04       	MVI A, 004h
0189   0146 84          	ADD H
0190   0147 67          	MOV H, A
0191   0148 3E 80       	MVI A,080h
0192   014A BC          	CMP H
0193   014B C2 50 01    	JNZ Fifo_Write_Do2 ;if fifo write pointer is not at 0x8000, move on
0194   014E 26 40       	MVI H,040h ; else wrap back to 0x4000 and move on
0195   0150             Fifo_Write_Do2:	
0196   0150 22 F4 05    	SHLD main_FifoWritePointer
0197   0153             
0198   0153             	
0199   0153             Fifo_Read_Start:
0200   0153             	;first thing to do is to check that we have at least full frame worth of fifo data
0201   0153             	;if we dont, wait for fifo to fill up
0202   0153             	;there are 2 cases of empty fifo: (write > read) and (write - read < 16) (normal case),
0203   0153             	;								or (write < read) and (read - write > 48) (wrap case)
0204   0153 2A F4 05    	LHLD main_FifoWritePointer
0205   0156 7C          	MOV A,H
0206   0157 2A F2 05    	LHLD main_FifoReadPointer
0207   015A 94          	SUB H
0208   015B F2 6E 01    	JP Fifo_Read_Normal
0209   015E             	;wrap case, calculating (read - write) instead
0210   015E 2A F2 05    	LHLD main_FifoReadPointer
0211   0161 7C          	MOV A,H
0212   0162 2A F4 05    	LHLD main_FifoWritePointer
0213   0165 94          	SUB H
0214   0166             	;ok, weve got (read - write),it should be positive. now check if its bigger than 48
0215   0166 D6 30       	SUI 030h
0216   0168 F2 F7 00    	JP Main_Loop_Start ;it IS bigger, meaning FIFO is almost empty, skipping read
0217   016B C3 73 01    	JMP Fifo_Read_Do
0218   016E             Fifo_Read_Normal:
0219   016E             	;normal case, diff (write - read) is already in A, checking if its bigger than 16
0220   016E D6 10       	SUI 010h
0221   0170 FA F7 00    	JM Main_Loop_Start ;it is NOT bigger, meaning FIFO is almost empty, skipping read	
0222   0173             Fifo_Read_Do:
0223   0173             	;decrease frame counter
0224   0173 2A FA 05    	LHLD main_iFrameCounter
0225   0176 2B          	DCX H
0226   0177 22 FA 05    	SHLD main_iFrameCounter
0227   017A             	;okay, FIFO is not empty, but current frame might be wrapping around FIFO end
0228   017A             	;we check this by adding frame size to read pointer
0229   017A 2A F2 05    	LHLD main_FifoReadPointer
0230   017D 23          	INX H
0231   017E 23          	INX H
0232   017F 5E          	MOV E,M
0233   0180 23          	INX H
0234   0181 56          	MOV D,M
0235   0182 23          	INX H
0236   0183 19          	DAD D
0237   0184 7C          	MOV A,H
0238   0185 D6 80       	SUI 080h
0239   0187 FA C2 01    	JM Fifo_Read_Do2 ;if frame is NOT wrapped, unpack it as is
0240   018A             	;frame IS wrapped, copy part that doesnt fit from 4000 to 8000
0241   018A             	;HL still stores overwrapped value, so use that
0242   018A E5          	PUSH H
0243   018B C1          	POP B
0244   018C 78          	MOV A,B
0245   018D E6 0F       	ANI 00Fh
0246   018F 47          	MOV B,A ;now we have a size in BC
0247   0190 21 00 40    	LXI H, 04000h
0248   0193 11 00 80    	LXI D, 08000h
0249   0196             Fifo_Read_Copy_Loop:
0250   0196 7E          	MOV A,M
0251   0197 12          	STAX D
0252   0198 23          	INX H
0253   0199 13          	INX D
0254   019A 0B          	DCX B
0255   019B AF          	XRA A ; A=0
0256   019C B8          	CMP B
0257   019D C2 96 01    	JNZ Fifo_Read_Copy_Loop
0258   01A0 B9          	CMP C
0259   01A1 C2 96 01    	JNZ Fifo_Read_Copy_Loop
0260   01A4             	;copy done, now processing frame as-is
0261   01A4             	;we should init DE and HL before calling unpack
0262   01A4 2A F6 05    	LHLD main_ScreenStartPointer
0263   01A7 EB          	XCHG
0264   01A8 2A F2 05    	LHLD main_FifoReadPointer
0265   01AB CD F3 01    	CALL unpack_btree1
0266   01AE             	;now move read pointer
0267   01AE 2A F2 05    	LHLD main_FifoReadPointer
0268   01B1 23          	INX H
0269   01B2 23          	INX H
0270   01B3 5E          	MOV E,M
0271   01B4 23          	INX H
0272   01B5 56          	MOV D,M
0273   01B6 23          	INX H
0274   01B7 19          	DAD D
0275   01B8 7C          	MOV A,H
0276   01B9 D6 40       	SUI 040h
0277   01BB 67          	MOV H,A
0278   01BC 22 F2 05    	SHLD main_FifoReadPointer
0279   01BF C3 F7 00    	JMP Main_Loop_Start ;go back to mail loop start	
0280   01C2             	
0281   01C2             Fifo_Read_Do2:	
0282   01C2             	;non-wrapped unpack
0283   01C2             	;we should init DE before calling unpack
0284   01C2 2A F6 05    	LHLD main_ScreenStartPointer
0285   01C5 EB          	XCHG
0286   01C6 2A F2 05    	LHLD main_FifoReadPointer
0287   01C9 CD F3 01    	CALL unpack_btree1
0288   01CC             	;now move read pointer
0289   01CC 2A F2 05    	LHLD main_FifoReadPointer
0290   01CF 23          	INX H
0291   01D0 23          	INX H
0292   01D1 5E          	MOV E,M
0293   01D2 23          	INX H
0294   01D3 56          	MOV D,M
0295   01D4 23          	INX H
0296   01D5 19          	DAD D
0297   01D6 22 F2 05    	SHLD main_FifoReadPointer
0298   01D9 C3 F7 00    	JMP Main_Loop_Start ;go back to mail loop start
0299   01DC             
0300   01DC             Do_Exit:
0301   01DC               
0302   01DC               ; 320 apogeyScreen0();
0303   01DC CD 6A 05      call apogeyScreen0
0304   01DF               ; 321 asm {
0305   01DF C3 75 F8    		JMP 0F875h ;jump to monitor
0306   01E2             	
0307   01E2               ; 325 asm{
0308   01E2 55 4E 4B 4E str_Unknown_Machine:	.db "UNKNOWN MACHINE",0
0308   01E6 4F 57 4E 20 
0308   01EA 4D 41 43 48 
0308   01EE 49 4E 45 00 
0309   01F2             	
0310   01F2 C9            ret
0311   01F3               ; --- unpack_btree1 -----------------------------------------------------------------
0312   01F3             unpack_btree1:
0313   01F3 23          	INX H
0314   01F4 23          	INX H
0315   01F5 23          	INX H
0316   01F6 23          	INX H
0317   01F7             	;LXI D, 0C113h ;ScreenStart
0318   01F7             	;LXI D, 0E1DAh ;ScreenStart
0319   01F7 7E          	MOV A,M ;load 1st byte into A
0320   01F8 23          	INX H ;move to next byte
0321   01F9 47          	MOV B,A ;save A
0322   01FA E6 01       	ANI 001h
0323   01FC CA 05 02    	JZ unpack_level1_1
0324   01FF CD 8A 02    	CALL unpack_level2
0325   0202 C3 0C 02    	JMP unpack_level1_1_end
0326   0205             unpack_level1_1:
0327   0205 E5          	PUSH H
0328   0206 21 58 02    	LXI H,0258h
0329   0209 19          	DAD D
0330   020A EB          	XCHG
0331   020B E1          	POP H
0332   020C             unpack_level1_1_end:
0333   020C 78          	MOV A,B ;restore A
0334   020D E6 02       	ANI 002h
0335   020F CA 18 02    	JZ unpack_level1_2
0336   0212 CD 8A 02    	CALL unpack_level2
0337   0215 C3 1F 02    	JMP unpack_level1_2_end
0338   0218             unpack_level1_2:
0339   0218 E5          	PUSH H
0340   0219 21 58 02    	LXI H,0258h
0341   021C 19          	DAD D
0342   021D EB          	XCHG
0343   021E E1          	POP H
0344   021F             unpack_level1_2_end:
0345   021F 78          	MOV A,B ;restore A
0346   0220 E6 04       	ANI 004h
0347   0222 CA 2B 02    	JZ unpack_level1_3
0348   0225 CD 8A 02    	CALL unpack_level2
0349   0228 C3 32 02    	JMP unpack_level1_3_end
0350   022B             unpack_level1_3:
0351   022B E5          	PUSH H
0352   022C 21 58 02    	LXI H,0258h
0353   022F 19          	DAD D
0354   0230 EB          	XCHG
0355   0231 E1          	POP H
0356   0232             unpack_level1_3_end:
0357   0232 78          	MOV A,B ;restore A
0358   0233 E6 08       	ANI 008h
0359   0235 CA 3E 02    	JZ unpack_level1_4
0360   0238 CD 8A 02    	CALL unpack_level2
0361   023B C3 45 02    	JMP unpack_level1_4_end
0362   023E             unpack_level1_4:
0363   023E E5          	PUSH H
0364   023F 21 58 02    	LXI H,0258h
0365   0242 19          	DAD D
0366   0243 EB          	XCHG
0367   0244 E1          	POP H
0368   0245             unpack_level1_4_end:
0369   0245 78          	MOV A,B ;restore A
0370   0246 E6 10       	ANI 010h
0371   0248 CA 51 02    	JZ unpack_level1_5
0372   024B CD 8A 02    	CALL unpack_level2
0373   024E C3 58 02    	JMP unpack_level1_5_end
0374   0251             unpack_level1_5:
0375   0251 E5          	PUSH H
0376   0252 21 58 02    	LXI H,0258h
0377   0255 19          	DAD D
0378   0256 EB          	XCHG
0379   0257 E1          	POP H
0380   0258             unpack_level1_5_end:
0381   0258 78          	MOV A,B ;restore A
0382   0259 E6 20       	ANI 020h
0383   025B CA 64 02    	JZ unpack_level1_6
0384   025E CD 8A 02    	CALL unpack_level2
0385   0261 C3 6B 02    	JMP unpack_level1_6_end
0386   0264             unpack_level1_6:
0387   0264 E5          	PUSH H
0388   0265 21 58 02    	LXI H,0258h
0389   0268 19          	DAD D
0390   0269 EB          	XCHG
0391   026A E1          	POP H
0392   026B             unpack_level1_6_end:
0393   026B 78          	MOV A,B ;restore A
0394   026C E6 40       	ANI 040h
0395   026E CA 77 02    	JZ unpack_level1_7
0396   0271 CD 8A 02    	CALL unpack_level2
0397   0274 C3 7E 02    	JMP unpack_level1_7_end
0398   0277             unpack_level1_7:
0399   0277 E5          	PUSH H
0400   0278 21 58 02    	LXI H,0258h
0401   027B 19          	DAD D
0402   027C EB          	XCHG
0403   027D E1          	POP H
0404   027E             unpack_level1_7_end:
0405   027E 78          	MOV A,B ;restore A
0406   027F E6 80       	ANI 080h
0407   0281 CA 87 02    	JZ unpack_level1_8
0408   0284 CD 8A 02    	CALL unpack_level2
0409   0287             unpack_level1_8:
0410   0287 C3 20 04    	JMP unpack_end
0411   028A             	
0412   028A             unpack_level2:
0413   028A C5          	PUSH B
0414   028B 7E          	MOV A,M ;load byte into A
0415   028C 23          	INX H ;move to next byte
0416   028D 47          	MOV B,A ;save A
0417   028E E6 01       	ANI 001h
0418   0290 CA 99 02    	JZ unpack_level2_1
0419   0293 CD 27 03    	CALL unpack_level3
0420   0296 C3 A0 02    	JMP unpack_level2_1_end
0421   0299             unpack_level2_1:
0422   0299 E5          	PUSH H
0423   029A 21 4B 00    	LXI H,04Bh
0424   029D 19          	DAD D
0425   029E EB          	XCHG
0426   029F E1          	POP H
0427   02A0             unpack_level2_1_end:
0428   02A0 78          	MOV A,B ;restore A
0429   02A1 E6 02       	ANI 002h
0430   02A3 CA AC 02    	JZ unpack_level2_2
0431   02A6 CD 27 03    	CALL unpack_level3
0432   02A9 C3 B3 02    	JMP unpack_level2_2_end
0433   02AC             unpack_level2_2:
0434   02AC E5          	PUSH H
0435   02AD 21 4B 00    	LXI H,04Bh
0436   02B0 19          	DAD D
0437   02B1 EB          	XCHG
0438   02B2 E1          	POP H
0439   02B3             unpack_level2_2_end:
0440   02B3 78          	MOV A,B ;restore A
0441   02B4 E6 04       	ANI 004h
0442   02B6 CA BF 02    	JZ unpack_level2_3
0443   02B9 CD 27 03    	CALL unpack_level3
0444   02BC C3 C6 02    	JMP unpack_level2_3_end
0445   02BF             unpack_level2_3:
0446   02BF E5          	PUSH H
0447   02C0 21 4B 00    	LXI H,04Bh
0448   02C3 19          	DAD D
0449   02C4 EB          	XCHG
0450   02C5 E1          	POP H
0451   02C6             unpack_level2_3_end:
0452   02C6 78          	MOV A,B ;restore A
0453   02C7 E6 08       	ANI 008h
0454   02C9 CA D2 02    	JZ unpack_level2_4
0455   02CC CD 27 03    	CALL unpack_level3
0456   02CF C3 D9 02    	JMP unpack_level2_4_end
0457   02D2             unpack_level2_4:
0458   02D2 E5          	PUSH H
0459   02D3 21 4B 00    	LXI H,04Bh
0460   02D6 19          	DAD D
0461   02D7 EB          	XCHG
0462   02D8 E1          	POP H
0463   02D9             unpack_level2_4_end:
0464   02D9 78          	MOV A,B ;restore A
0465   02DA E6 10       	ANI 010h
0466   02DC CA E5 02    	JZ unpack_level2_5
0467   02DF CD 27 03    	CALL unpack_level3
0468   02E2 C3 EC 02    	JMP unpack_level2_5_end
0469   02E5             unpack_level2_5:
0470   02E5 E5          	PUSH H
0471   02E6 21 4B 00    	LXI H,04Bh
0472   02E9 19          	DAD D
0473   02EA EB          	XCHG
0474   02EB E1          	POP H
0475   02EC             unpack_level2_5_end:
0476   02EC 78          	MOV A,B ;restore A
0477   02ED E6 20       	ANI 020h
0478   02EF CA F8 02    	JZ unpack_level2_6
0479   02F2 CD 27 03    	CALL unpack_level3
0480   02F5 C3 FF 02    	JMP unpack_level2_6_end
0481   02F8             unpack_level2_6:
0482   02F8 E5          	PUSH H
0483   02F9 21 4B 00    	LXI H,04Bh
0484   02FC 19          	DAD D
0485   02FD EB          	XCHG
0486   02FE E1          	POP H
0487   02FF             unpack_level2_6_end:
0488   02FF 78          	MOV A,B ;restore A
0489   0300 E6 40       	ANI 040h
0490   0302 CA 0B 03    	JZ unpack_level2_7
0491   0305 CD 27 03    	CALL unpack_level3
0492   0308 C3 12 03    	JMP unpack_level2_7_end
0493   030B             unpack_level2_7:
0494   030B E5          	PUSH H
0495   030C 21 4B 00    	LXI H,04Bh
0496   030F 19          	DAD D
0497   0310 EB          	XCHG
0498   0311 E1          	POP H
0499   0312             unpack_level2_7_end:
0500   0312 78          	MOV A,B ;restore A
0501   0313 E6 80       	ANI 080h
0502   0315 CA 1E 03    	JZ unpack_level2_8
0503   0318 CD 27 03    	CALL unpack_level3
0504   031B C3 25 03    	JMP unpack_level2_8_end
0505   031E             unpack_level2_8:
0506   031E E5          	PUSH H
0507   031F 21 4B 00    	LXI H,04Bh
0508   0322 19          	DAD D
0509   0323 EB          	XCHG
0510   0324 E1          	POP H
0511   0325             unpack_level2_8_end:
0512   0325 C1          	POP B
0513   0326 C9          	RET
0514   0327             
0515   0327             unpack_level3:
0516   0327 C5          	PUSH B
0517   0328 7E          	MOV A,M ;load byte into A
0518   0329 23          	INX H ;move to next byte
0519   032A 47          	MOV B,A ;save A
0520   032B E6 01       	ANI 001h
0521   032D CA 36 03    	JZ unpack_level3_1
0522   0330 CD CB 03    	CALL unpack_level4
0523   0333 C3 3D 03    	JMP unpack_level3_1_end
0524   0336             unpack_level3_1:
0525   0336 E5          	PUSH H
0526   0337 21 08 00    	LXI H,008h
0527   033A 19          	DAD D
0528   033B EB          	XCHG
0529   033C E1          	POP H
0530   033D             unpack_level3_1_end:
0531   033D 78          	MOV A,B ;restore A
0532   033E E6 02       	ANI 002h
0533   0340 CA 49 03    	JZ unpack_level3_2
0534   0343 CD CB 03    	CALL unpack_level4
0535   0346 C3 50 03    	JMP unpack_level3_2_end
0536   0349             unpack_level3_2:
0537   0349 E5          	PUSH H
0538   034A 21 08 00    	LXI H,008h
0539   034D 19          	DAD D
0540   034E EB          	XCHG
0541   034F E1          	POP H
0542   0350             unpack_level3_2_end:
0543   0350 78          	MOV A,B ;restore A
0544   0351 E6 04       	ANI 004h
0545   0353 CA 5C 03    	JZ unpack_level3_3
0546   0356 CD CB 03    	CALL unpack_level4
0547   0359 C3 63 03    	JMP unpack_level3_3_end
0548   035C             unpack_level3_3:
0549   035C E5          	PUSH H
0550   035D 21 08 00    	LXI H,008h
0551   0360 19          	DAD D
0552   0361 EB          	XCHG
0553   0362 E1          	POP H
0554   0363             unpack_level3_3_end:
0555   0363 78          	MOV A,B ;restore A
0556   0364 E6 08       	ANI 008h
0557   0366 CA 6F 03    	JZ unpack_level3_4
0558   0369 CD CB 03    	CALL unpack_level4
0559   036C C3 76 03    	JMP unpack_level3_4_end
0560   036F             unpack_level3_4:
0561   036F E5          	PUSH H
0562   0370 21 08 00    	LXI H,008h
0563   0373 19          	DAD D
0564   0374 EB          	XCHG
0565   0375 E1          	POP H
0566   0376             unpack_level3_4_end:
0567   0376 78          	MOV A,B ;restore A
0568   0377 E6 10       	ANI 010h
0569   0379 CA 82 03    	JZ unpack_level3_5
0570   037C CD CB 03    	CALL unpack_level4
0571   037F C3 89 03    	JMP unpack_level3_5_end
0572   0382             unpack_level3_5:
0573   0382 E5          	PUSH H
0574   0383 21 08 00    	LXI H,008h
0575   0386 19          	DAD D
0576   0387 EB          	XCHG
0577   0388 E1          	POP H
0578   0389             unpack_level3_5_end:
0579   0389 78          	MOV A,B ;restore A
0580   038A E6 20       	ANI 020h
0581   038C CA 95 03    	JZ unpack_level3_6
0582   038F CD CB 03    	CALL unpack_level4
0583   0392 C3 9C 03    	JMP unpack_level3_6_end
0584   0395             unpack_level3_6:
0585   0395 E5          	PUSH H
0586   0396 21 08 00    	LXI H,008h
0587   0399 19          	DAD D
0588   039A EB          	XCHG
0589   039B E1          	POP H
0590   039C             unpack_level3_6_end:
0591   039C 78          	MOV A,B ;restore A
0592   039D E6 40       	ANI 040h
0593   039F CA A8 03    	JZ unpack_level3_7
0594   03A2 CD CB 03    	CALL unpack_level4
0595   03A5 C3 AF 03    	JMP unpack_level3_7_end
0596   03A8             unpack_level3_7:
0597   03A8 E5          	PUSH H
0598   03A9 21 08 00    	LXI H,008h
0599   03AC 19          	DAD D
0600   03AD EB          	XCHG
0601   03AE E1          	POP H
0602   03AF             unpack_level3_7_end:
0603   03AF 78          	MOV A,B ;restore A
0604   03B0 E6 80       	ANI 080h
0605   03B2 CA BB 03    	JZ unpack_level3_8
0606   03B5 CD CB 03    	CALL unpack_level4
0607   03B8 C3 C2 03    	JMP unpack_level3_8_end
0608   03BB             unpack_level3_8:
0609   03BB E5          	PUSH H
0610   03BC 21 08 00    	LXI H,008h
0611   03BF 19          	DAD D
0612   03C0 EB          	XCHG
0613   03C1 E1          	POP H
0614   03C2             unpack_level3_8_end:
0615   03C2             	;end of line: add 11 bytes
0616   03C2 E5          	PUSH H
0617   03C3 21 0B 00    	LXI H,00Bh
0618   03C6 19          	DAD D
0619   03C7 EB          	XCHG
0620   03C8 E1          	POP H
0621   03C9             	;going back
0622   03C9 C1          	POP B
0623   03CA C9          	RET
0624   03CB             
0625   03CB             unpack_level4:
0626   03CB C5          	PUSH B
0627   03CC 7E          	MOV A,M ;load byte into A
0628   03CD 23          	INX H ;move to next byte
0629   03CE 47          	MOV B,A ;save A
0630   03CF E6 01       	ANI 001h
0631   03D1 CA D7 03    	JZ unpack_level4_1
0632   03D4 7E          	MOV A,M ;load byte into A
0633   03D5 23          	INX H ;move to next byte
0634   03D6 12          	STAX D
0635   03D7             unpack_level4_1:
0636   03D7 13          	INX D
0637   03D8 78          	MOV A,B ;restore A
0638   03D9 E6 02       	ANI 002h
0639   03DB CA E1 03    	JZ unpack_level4_2
0640   03DE 7E          	MOV A,M ;load byte into A
0641   03DF 23          	INX H ;move to next byte
0642   03E0 12          	STAX D
0643   03E1             unpack_level4_2:
0644   03E1 13          	INX D
0645   03E2 78          	MOV A,B ;restore A
0646   03E3 E6 04       	ANI 004h
0647   03E5 CA EB 03    	JZ unpack_level4_3
0648   03E8 7E          	MOV A,M ;load byte into A
0649   03E9 23          	INX H ;move to next byte
0650   03EA 12          	STAX D
0651   03EB             unpack_level4_3:
0652   03EB 13          	INX D
0653   03EC 78          	MOV A,B ;restore A
0654   03ED E6 08       	ANI 008h
0655   03EF CA F5 03    	JZ unpack_level4_4
0656   03F2 7E          	MOV A,M ;load byte into A
0657   03F3 23          	INX H ;move to next byte
0658   03F4 12          	STAX D
0659   03F5             unpack_level4_4:
0660   03F5 13          	INX D
0661   03F6 78          	MOV A,B ;restore A
0662   03F7 E6 10       	ANI 010h
0663   03F9 CA FF 03    	JZ unpack_level4_5
0664   03FC 7E          	MOV A,M ;load byte into A
0665   03FD 23          	INX H ;move to next byte
0666   03FE 12          	STAX D
0667   03FF             unpack_level4_5:
0668   03FF 13          	INX D
0669   0400 78          	MOV A,B ;restore A
0670   0401 E6 20       	ANI 020h
0671   0403 CA 09 04    	JZ unpack_level4_6
0672   0406 7E          	MOV A,M ;load byte into A
0673   0407 23          	INX H ;move to next byte
0674   0408 12          	STAX D
0675   0409             unpack_level4_6:
0676   0409 13          	INX D
0677   040A 78          	MOV A,B ;restore A
0678   040B E6 40       	ANI 040h
0679   040D CA 13 04    	JZ unpack_level4_7
0680   0410 7E          	MOV A,M ;load byte into A
0681   0411 23          	INX H ;move to next byte
0682   0412 12          	STAX D
0683   0413             unpack_level4_7:
0684   0413 13          	INX D
0685   0414 78          	MOV A,B ;restore A
0686   0415 E6 80       	ANI 080h
0687   0417 CA 1D 04    	JZ unpack_level4_8
0688   041A 7E          	MOV A,M ;load byte into A
0689   041B 23          	INX H ;move to next byte
0690   041C 12          	STAX D
0691   041D             unpack_level4_8:
0692   041D 13          	INX D
0693   041E C1          	POP B
0694   041F C9          	RET
0695   0420             	
0696   0420             unpack_end:
0697   0420 00          	NOP
0698   0421               
0699   0421 C9            ret
0700   0422               ; --- fs_init -----------------------------------------------------------------
0701   0422             fs_init:
0702   0422 22 00 06        SHLD fs_cmdLine
0703   0425 EB              XCHG
0704   0426 22 03 06        SHLD fs_selfName
0705   0429 60              MOV H, B
0706   042A 69              MOV L, C
0707   042B 22 30 04        SHLD fs_entry_n+1
0708   042E               
0709   042E C9            ret
0710   042F               ; --- fs_entry -----------------------------------------------------------------
0711   042F             fs_entry:
0712   042F             fs_entry_n:
0713   042F C3 00 00        JMP 0000h
0714   0432               
0715   0432 C9            ret
0716   0433               ; --- fs_open -----------------------------------------------------------------
0717   0433             fs_open:
0718   0433 22 0B 06      shld fs_open_1
0719   0436               ; 5 return fs_open0(name, O_OPEN);
0720   0436 22 10 06      shld fs_open0_1
0721   0439 AF            xra a
0722   043A C3 C4 05      jmp fs_open0
0723   043D C9            ret
0724   043E               ; --- apogeyScreen3a -----------------------------------------------------------------
0725   043E             apogeyScreen3a:
0726   043E C5            push b
0727   043F               ; 3 memset((uchar*)MEM_ADDR, 0, (HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+2); 
0728   043F 21 FF C0      lxi h, 49407
0729   0442 22 13 06      shld memset_1
0730   0445 AF            xra a
0731   0446 32 15 06      sta memset_2
0732   0449 21 01 0F      lxi h, 3841
0733   044C CD D3 05      call memset
0734   044F               ; 4 for(v=(uchar*)(MEM_ADDR)-1, i=TOP_INVISIBLE; i; --i) 
0735   044F 01 FE C0      lxi b, 49406
0736   0452 3E 07         mvi a, 7
0737   0454 32 0D 06      sta apogeyScreen3a_i
0738   0457             l0:
0739   0457               ; convertToConfition
0740   0457 3A 0D 06      lda apogeyScreen3a_i
0741   045A B7            ora a
0742   045B CA 6A 04      jz l1
0743   045E               ; 5 v+=2, *v = 0xF1; —ложение BC с константой 2
0744   045E 03            inx b
0745   045F 03            inx b
0746   0460 3E F1         mvi a, 241
0747   0462 02            stax b
0748   0463             l2:
0749   0463 21 0D 06      lxi h, apogeyScreen3a_i
0750   0466 35            dcr m
0751   0467 C3 57 04      jmp l0
0752   046A             l1:
0753   046A               ; 6 if(FILL_EOL) 7 for(i = HEIGHT; i; --i) 
0754   046A 3E 33         mvi a, 51
0755   046C 32 0D 06      sta apogeyScreen3a_i
0756   046F             l4:
0757   046F               ; convertToConfition
0758   046F 3A 0D 06      lda apogeyScreen3a_i
0759   0472 B7            ora a
0760   0473 CA 86 04      jz l5
0761   0476               ; 8 v += (BPL), *v = 0xF1; —ложение с BC
0762   0476 21 4B 00      lxi h, 75
0763   0479 09            dad b
0764   047A 44            mov b, h
0765   047B 4D            mov c, l
0766   047C 3E F1         mvi a, 241
0767   047E 02            stax b
0768   047F             l6:
0769   047F 21 0D 06      lxi h, apogeyScreen3a_i
0770   0482 35            dcr m
0771   0483 C3 6F 04      jmp l4
0772   0486             l5:
0773   0486               ; 9 ((uchar*)MEM_ADDR)[(HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+1] = 0xFF; 
0774   0486 21 FF CF      lxi h, 53247
0775   0489 36 FF         mvi m, 255
0776   048B               ; 10 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*2 + 9; 
0777   048B 21 16 C1      lxi h, 49430
0778   048E 22 18 06      shld apogeyVideoMem
0779   0491               ; 11 apogeyVideoBpl = (BPL); 
0780   0491 3E 4B         mvi a, 75
0781   0493 32 1A 06      sta apogeyVideoBpl
0782   0496               ; 1 ((uchar*)0xEF00)
0783   0496 21 01 EF      lxi h, 61185
0784   0499 36 00         mvi m, 0
0785   049B               ; 1 ((uchar*)0xEF00)
0786   049B 2D            dcr l
0787   049C 36 4D         mvi m, 77
0788   049E               ; 1 ((uchar*)0xEF00)
0789   049E 36 7F         mvi m, 127
0790   04A0               ; 1 ((uchar*)0xEF00)
0791   04A0 36 33         mvi m, 51
0792   04A2               ; 1 ((uchar*)0xEF00)
0793   04A2 36 53         mvi m, 83
0794   04A4               ; 1 ((uchar*)0xEF00)
0795   04A4 2C            inr l
0796   04A5 36 23         mvi m, 35
0797   04A7               ; 7 while((VG75[1] & 0x20) == 0); 
0798   04A7             l13:
0799   04A7 3A 01 EF      lda 61185
0800   04AA E6 20         ani 32
0801   04AC C2 B2 04      jnz l14
0802   04AF C3 A7 04      jmp l13
0803   04B2             l14:
0804   04B2               ; 8 while((VG75[1] & 0x20) == 0); 
0805   04B2             l15:
0806   04B2 3A 01 EF      lda 61185
0807   04B5 E6 20         ani 32
0808   04B7 C2 BD 04      jnz l16
0809   04BA C3 B2 04      jmp l15
0810   04BD             l16:
0811   04BD               ; 1 ((uchar*)0xF000)
0812   04BD 21 08 F0      lxi h, 61448
0813   04C0 36 80         mvi m, 128
0814   04C2               ; 1 ((uchar*)0xF000)
0815   04C2 2E 04         mvi l, 4
0816   04C4 36 FF         mvi m, 255
0817   04C6               ; 1 ((uchar*)0xF000)
0818   04C6 36 C0         mvi m, 192
0819   04C8               ; 1 ((uchar*)0xF000)
0820   04C8 2C            inr l
0821   04C9 36 00         mvi m, 0
0822   04CB               ; 1 ((uchar*)0xF000)
0823   04CB 36 4F         mvi m, 79
0824   04CD               ; 1 ((uchar*)0xF000)
0825   04CD 2E 08         mvi l, 8
0826   04CF 36 A4         mvi m, 164
0827   04D1               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 
0828   04D1 FB           ei 
0829   04D2               ; 15 asm { di } 
0830   04D2 C1            pop b
0831   04D3 C9            ret
0832   04D4               ; --- apogeyScreen2a -----------------------------------------------------------------
0833   04D4             apogeyScreen2a:
0834   04D4 C5            push b
0835   04D5               ; 3 memset((uchar*)MEM_ADDR, 0, (HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+2); 
0836   04D5 21 D0 E1      lxi h, 57808
0837   04D8 22 13 06      shld memset_1
0838   04DB AF            xra a
0839   04DC 32 15 06      sta memset_2
0840   04DF 21 1D 09      lxi h, 2333
0841   04E2 CD D3 05      call memset
0842   04E5               ; 4 for(v=(uchar*)(MEM_ADDR)-1, i=TOP_INVISIBLE; i; --i) 
0843   04E5 01 CF E1      lxi b, 57807
0844   04E8 3E 03         mvi a, 3
0845   04EA 32 0E 06      sta apogeyScreen2a_i
0846   04ED             l19:
0847   04ED               ; convertToConfition
0848   04ED 3A 0E 06      lda apogeyScreen2a_i
0849   04F0 B7            ora a
0850   04F1 CA 00 05      jz l20
0851   04F4               ; 5 v+=2, *v = 0xF1; —ложение BC с константой 2
0852   04F4 03            inx b
0853   04F5 03            inx b
0854   04F6 3E F1         mvi a, 241
0855   04F8 02            stax b
0856   04F9             l21:
0857   04F9 21 0E 06      lxi h, apogeyScreen2a_i
0858   04FC 35            dcr m
0859   04FD C3 ED 04      jmp l19
0860   0500             l20:
0861   0500               ; 6 if(FILL_EOL) 7 for(i = HEIGHT; i; --i) 
0862   0500 3E 1F         mvi a, 31
0863   0502 32 0E 06      sta apogeyScreen2a_i
0864   0505             l23:
0865   0505               ; convertToConfition
0866   0505 3A 0E 06      lda apogeyScreen2a_i
0867   0508 B7            ora a
0868   0509 CA 1C 05      jz l24
0869   050C               ; 8 v += (BPL), *v = 0xF1; —ложение с BC
0870   050C 21 4B 00      lxi h, 75
0871   050F 09            dad b
0872   0510 44            mov b, h
0873   0511 4D            mov c, l
0874   0512 3E F1         mvi a, 241
0875   0514 02            stax b
0876   0515             l25:
0877   0515 21 0E 06      lxi h, apogeyScreen2a_i
0878   0518 35            dcr m
0879   0519 C3 05 05      jmp l23
0880   051C             l24:
0881   051C               ; 9 ((uchar*)MEM_ADDR)[(HEIGHT)*(BPL)+(TOP_INVISIBLE)*2+1] = 0xFF; 
0882   051C 21 EC EA      lxi h, 60140
0883   051F 36 FF         mvi m, 255
0884   0521               ; 10 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*2 + 9; 
0885   0521 21 DF E1      lxi h, 57823
0886   0524 22 18 06      shld apogeyVideoMem
0887   0527               ; 11 apogeyVideoBpl = (BPL); 
0888   0527 3E 4B         mvi a, 75
0889   0529 32 1A 06      sta apogeyVideoBpl
0890   052C               ; 1 ((uchar*)0xEF00)
0891   052C 21 01 EF      lxi h, 61185
0892   052F 36 00         mvi m, 0
0893   0531               ; 1 ((uchar*)0xEF00)
0894   0531 2D            dcr l
0895   0532 36 4D         mvi m, 77
0896   0534               ; 1 ((uchar*)0xEF00)
0897   0534 36 64         mvi m, 100
0898   0536               ; 1 ((uchar*)0xEF00)
0899   0536 36 77         mvi m, 119
0900   0538               ; 1 ((uchar*)0xEF00)
0901   0538 36 53         mvi m, 83
0902   053A               ; 1 ((uchar*)0xEF00)
0903   053A 2C            inr l
0904   053B 36 23         mvi m, 35
0905   053D               ; 7 while((VG75[1] & 0x20) == 0); 
0906   053D             l32:
0907   053D 3A 01 EF      lda 61185
0908   0540 E6 20         ani 32
0909   0542 C2 48 05      jnz l33
0910   0545 C3 3D 05      jmp l32
0911   0548             l33:
0912   0548               ; 8 while((VG75[1] & 0x20) == 0); 
0913   0548             l34:
0914   0548 3A 01 EF      lda 61185
0915   054B E6 20         ani 32
0916   054D C2 53 05      jnz l35
0917   0550 C3 48 05      jmp l34
0918   0553             l35:
0919   0553               ; 1 ((uchar*)0xF000)
0920   0553 21 08 F0      lxi h, 61448
0921   0556 36 80         mvi m, 128
0922   0558               ; 1 ((uchar*)0xF000)
0923   0558 2E 04         mvi l, 4
0924   055A 36 D0         mvi m, 208
0925   055C               ; 1 ((uchar*)0xF000)
0926   055C 36 E1         mvi m, 225
0927   055E               ; 1 ((uchar*)0xF000)
0928   055E 2C            inr l
0929   055F 36 1C         mvi m, 28
0930   0561               ; 1 ((uchar*)0xF000)
0931   0561 36 49         mvi m, 73
0932   0563               ; 1 ((uchar*)0xF000)
0933   0563 2E 08         mvi l, 8
0934   0565 36 A4         mvi m, 164
0935   0567               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
0936   0567 F3           di 
0937   0568 C1            pop b
0938   0569 C9            ret
0939   056A               ; --- apogeyScreen0 -----------------------------------------------------------------
0940   056A             apogeyScreen0:
0941   056A C5            push b
0942   056B               ; 3 memset((uchar*)(MEM_ADDR), 0, (FULL_HEIGHT)*(BPL)); 
0943   056B 21 D0 E1      lxi h, 57808
0944   056E 22 13 06      shld memset_1
0945   0571 AF            xra a
0946   0572 32 15 06      sta memset_2
0947   0575 21 24 09      lxi h, 2340
0948   0578 CD D3 05      call memset
0949   057B               ; 4 if(FILL_EOL) { 5 v = (uchar*)(MEM_ADDR)-1; 9 apogeyVideoMem = (uchar*)(MEM_ADDR) + (TOP_INVISIBLE)*(BPL) + ((HIDDEN_ATTRIB) ? 9 : 8); 
0950   057B 21 C2 E2      lxi h, 58050
0951   057E 22 18 06      shld apogeyVideoMem
0952   0581               ; 10 apogeyVideoBpl = (BPL); 
0953   0581 3E 4E         mvi a, 78
0954   0583 32 1A 06      sta apogeyVideoBpl
0955   0586               ; 1 ((uchar*)0xEF00)
0956   0586 21 01 EF      lxi h, 61185
0957   0589 36 00         mvi m, 0
0958   058B               ; 1 ((uchar*)0xEF00)
0959   058B 2D            dcr l
0960   058C 36 4D         mvi m, 77
0961   058E               ; 1 ((uchar*)0xEF00)
0962   058E 36 1D         mvi m, 29
0963   0590               ; 1 ((uchar*)0xEF00)
0964   0590 36 99         mvi m, 153
0965   0592               ; 1 ((uchar*)0xEF00)
0966   0592 36 D3         mvi m, 211
0967   0594               ; 1 ((uchar*)0xEF00)
0968   0594 2C            inr l
0969   0595 36 23         mvi m, 35
0970   0597               ; 7 while((VG75[1] & 0x20) == 0); 
0971   0597             l50:
0972   0597 3A 01 EF      lda 61185
0973   059A E6 20         ani 32
0974   059C C2 A2 05      jnz l51
0975   059F C3 97 05      jmp l50
0976   05A2             l51:
0977   05A2               ; 8 while((VG75[1] & 0x20) == 0); 
0978   05A2             l52:
0979   05A2 3A 01 EF      lda 61185
0980   05A5 E6 20         ani 32
0981   05A7 C2 AD 05      jnz l53
0982   05AA C3 A2 05      jmp l52
0983   05AD             l53:
0984   05AD               ; 1 ((uchar*)0xF000)
0985   05AD 21 08 F0      lxi h, 61448
0986   05B0 36 80         mvi m, 128
0987   05B2               ; 1 ((uchar*)0xF000)
0988   05B2 2E 04         mvi l, 4
0989   05B4 36 D0         mvi m, 208
0990   05B6               ; 1 ((uchar*)0xF000)
0991   05B6 36 E1         mvi m, 225
0992   05B8               ; 1 ((uchar*)0xF000)
0993   05B8 2C            inr l
0994   05B9 36 23         mvi m, 35
0995   05BB               ; 1 ((uchar*)0xF000)
0996   05BB 36 49         mvi m, 73
0997   05BD               ; 1 ((uchar*)0xF000)
0998   05BD 2E 08         mvi l, 8
0999   05BF 36 A4         mvi m, 164
1000   05C1               ; 15 if(CHAR_GEN) asm { ei } else asm { di } 15 asm { ei } else asm { di } 15 asm { di } 
1001   05C1 F3           di 
1002   05C2 C1            pop b
1003   05C3 C9            ret
1004   05C4               ; --- fs_open0 -----------------------------------------------------------------
1005   05C4             fs_open0:
1006   05C4 32 12 06      sta fs_open0_2
1007   05C7               ; 5 asm {      
1008   05C7                   
1009   05C7 C5              PUSH B
1010   05C8                 ; a = fs_open0_2
1011   05C8 57              MOV  D, A 
1012   05C9 2A 10 06        LHLD fs_open0_1
1013   05CC 3E 02           MVI  A, 2
1014   05CE CD 2F 04        CALL fs_entry
1015   05D1 C1              POP  B
1016   05D2               
1017   05D2 C9            ret
1018   05D3               ; --- memset -----------------------------------------------------------------
1019   05D3             memset:
1020   05D3 22 16 06      shld memset_3
1021   05D6               ; 2 asm {
1022   05D6 C5              push b
1023   05D7 3A 15 06        lda memset_2
1024   05DA EB              xchg
1025   05DB 2A 13 06        lhld memset_1
1026   05DE EB              xchg
1027   05DF 01 FF FF        lxi b, -1    
1028   05E2             memset_l1:
1029   05E2 09              dad b
1030   05E3 D2 EB 05        jnc memset_l2
1031   05E6 12              stax d
1032   05E7 13              inx d
1033   05E8 C3 E2 05        jmp memset_l1
1034   05EB             memset_l2:
1035   05EB C1              pop b
1036   05EC               
1037   05EC C9            ret
1038   05ED             main_i:
1039   05ED              .ds 2
1040   05EF             main_j:
1041   05EF              .ds 2
1042   05F1             main_c:
1043   05F1              .ds 1
1044   05F2             main_FifoReadPointer:
1045   05F2              .ds 2
1046   05F4             main_FifoWritePointer:
1047   05F4              .ds 2
1048   05F6             main_ScreenStartPointer:
1049   05F6              .ds 2
1050   05F8             main_iNumberOfFrames:
1051   05F8              .ds 2
1052   05FA             main_iFrameCounter:
1053   05FA              .ds 2
1054   05FC             main_Machine_Type:
1055   05FC              .ds 1
1056   05FD             main_Screen_Type:
1057   05FD              .ds 1
1058   05FE             main_Fifo_Write_Threshold_1:
1059   05FE              .ds 1
1060   05FF             main_Fifo_Write_Threshold_2:
1061   05FF              .ds 1
1062   0600             fs_cmdLine:
1063   0600 02 06        .dw $+2
1064   0602              .ds 1
1065   0603             fs_selfName:
1066   0603 05 06        .dw $+2
1067   0605              .ds 1
1068   0606             fs_low:
1069   0606              .ds 2
1070   0608             fs_high:
1071   0608              .ds 2
1072   060A             fs_addr:
1073   060A              .ds 1
1074   060B             fs_open_1:
1075   060B              .ds 2
1076   060D             apogeyScreen3a_i:
1077   060D              .ds 1
1078   060E             apogeyScreen2a_i:
1079   060E              .ds 1
1080   060F             apogeyScreen0_i:
1081   060F              .ds 1
1082   0610             fs_open0_1:
1083   0610              .ds 2
1084   0612             fs_open0_2:
1085   0612              .ds 1
1086   0613             memset_1:
1087   0613              .ds 2
1088   0615             memset_2:
1089   0615              .ds 1
1090   0616             memset_3:
1091   0616              .ds 2
1092   0618             apogeyVideoMem:
1093   0618 C2 E2        .dw 58050
1094   061A             
1095   061A             apogeyVideoBpl:
1096   061A 4E           .db 78
1097   061B             
1098   061B             string0:
1099   061B 56 49 44 45  .db 86,73,68,69,79,47,65,80,80,76,69,46,65,80,86,0
1099   061F 4F 2F 41 50 
1099   0623 50 4C 45 2E 
1099   0627 41 50 56 00 
1100   062B               .end
tasm: Number of errors = 0
